
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model RentDetail
 * 
 */
export type RentDetail = $Result.DefaultSelection<Prisma.$RentDetailPayload>
/**
 * Model LentDetail
 * 
 */
export type LentDetail = $Result.DefaultSelection<Prisma.$LentDetailPayload>
/**
 * Model PurchaseDetail
 * 
 */
export type PurchaseDetail = $Result.DefaultSelection<Prisma.$PurchaseDetailPayload>
/**
 * Model SellDetail
 * 
 */
export type SellDetail = $Result.DefaultSelection<Prisma.$SellDetailPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.rentDetail`: Exposes CRUD operations for the **RentDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RentDetails
    * const rentDetails = await prisma.rentDetail.findMany()
    * ```
    */
  get rentDetail(): Prisma.RentDetailDelegate<ExtArgs>;

  /**
   * `prisma.lentDetail`: Exposes CRUD operations for the **LentDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LentDetails
    * const lentDetails = await prisma.lentDetail.findMany()
    * ```
    */
  get lentDetail(): Prisma.LentDetailDelegate<ExtArgs>;

  /**
   * `prisma.purchaseDetail`: Exposes CRUD operations for the **PurchaseDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseDetails
    * const purchaseDetails = await prisma.purchaseDetail.findMany()
    * ```
    */
  get purchaseDetail(): Prisma.PurchaseDetailDelegate<ExtArgs>;

  /**
   * `prisma.sellDetail`: Exposes CRUD operations for the **SellDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SellDetails
    * const sellDetails = await prisma.sellDetail.findMany()
    * ```
    */
  get sellDetail(): Prisma.SellDetailDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.0
   * Query Engine version: a9b7003df90aa623086e4d6f4e43c72468e6339b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Product: 'Product',
    Category: 'Category',
    RentDetail: 'RentDetail',
    LentDetail: 'LentDetail',
    PurchaseDetail: 'PurchaseDetail',
    SellDetail: 'SellDetail'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'product' | 'category' | 'rentDetail' | 'lentDetail' | 'purchaseDetail' | 'sellDetail'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      RentDetail: {
        payload: Prisma.$RentDetailPayload<ExtArgs>
        fields: Prisma.RentDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>
          }
          findFirst: {
            args: Prisma.RentDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>
          }
          findMany: {
            args: Prisma.RentDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>[]
          }
          create: {
            args: Prisma.RentDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>
          }
          createMany: {
            args: Prisma.RentDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RentDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>
          }
          update: {
            args: Prisma.RentDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>
          }
          deleteMany: {
            args: Prisma.RentDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RentDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RentDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentDetailPayload>
          }
          aggregate: {
            args: Prisma.RentDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRentDetail>
          }
          groupBy: {
            args: Prisma.RentDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RentDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<RentDetailCountAggregateOutputType> | number
          }
        }
      }
      LentDetail: {
        payload: Prisma.$LentDetailPayload<ExtArgs>
        fields: Prisma.LentDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LentDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LentDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>
          }
          findFirst: {
            args: Prisma.LentDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LentDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>
          }
          findMany: {
            args: Prisma.LentDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>[]
          }
          create: {
            args: Prisma.LentDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>
          }
          createMany: {
            args: Prisma.LentDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LentDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>
          }
          update: {
            args: Prisma.LentDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>
          }
          deleteMany: {
            args: Prisma.LentDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LentDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LentDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LentDetailPayload>
          }
          aggregate: {
            args: Prisma.LentDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLentDetail>
          }
          groupBy: {
            args: Prisma.LentDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LentDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.LentDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<LentDetailCountAggregateOutputType> | number
          }
        }
      }
      PurchaseDetail: {
        payload: Prisma.$PurchaseDetailPayload<ExtArgs>
        fields: Prisma.PurchaseDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>
          }
          findFirst: {
            args: Prisma.PurchaseDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>
          }
          findMany: {
            args: Prisma.PurchaseDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>[]
          }
          create: {
            args: Prisma.PurchaseDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>
          }
          createMany: {
            args: Prisma.PurchaseDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PurchaseDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>
          }
          update: {
            args: Prisma.PurchaseDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PurchaseDetailPayload>
          }
          aggregate: {
            args: Prisma.PurchaseDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePurchaseDetail>
          }
          groupBy: {
            args: Prisma.PurchaseDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseDetailCountAggregateOutputType> | number
          }
        }
      }
      SellDetail: {
        payload: Prisma.$SellDetailPayload<ExtArgs>
        fields: Prisma.SellDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SellDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>
          }
          findFirst: {
            args: Prisma.SellDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>
          }
          findMany: {
            args: Prisma.SellDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>[]
          }
          create: {
            args: Prisma.SellDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>
          }
          createMany: {
            args: Prisma.SellDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SellDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>
          }
          update: {
            args: Prisma.SellDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>
          }
          deleteMany: {
            args: Prisma.SellDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SellDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SellDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellDetailPayload>
          }
          aggregate: {
            args: Prisma.SellDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSellDetail>
          }
          groupBy: {
            args: Prisma.SellDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SellDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<SellDetailCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    rentList: number
    LentDetail: number
    PurchaseDetail: number
    SellDetail: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rentList?: boolean | UserCountOutputTypeCountRentListArgs
    LentDetail?: boolean | UserCountOutputTypeCountLentDetailArgs
    PurchaseDetail?: boolean | UserCountOutputTypeCountPurchaseDetailArgs
    SellDetail?: boolean | UserCountOutputTypeCountSellDetailArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRentListArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RentDetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LentDetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPurchaseDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PurchaseDetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSellDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SellDetailWhereInput
  }



  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    categories: number
    RentDetail: number
    LentDetail: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categories?: boolean | ProductCountOutputTypeCountCategoriesArgs
    RentDetail?: boolean | ProductCountOutputTypeCountRentDetailArgs
    LentDetail?: boolean | ProductCountOutputTypeCountLentDetailArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountRentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RentDetailWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountLentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LentDetailWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    phoneNumber: number
    address: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    rentList?: boolean | User$rentListArgs<ExtArgs>
    LentDetail?: boolean | User$LentDetailArgs<ExtArgs>
    PurchaseDetail?: boolean | User$PurchaseDetailArgs<ExtArgs>
    SellDetail?: boolean | User$SellDetailArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rentList?: boolean | User$rentListArgs<ExtArgs>
    LentDetail?: boolean | User$LentDetailArgs<ExtArgs>
    PurchaseDetail?: boolean | User$PurchaseDetailArgs<ExtArgs>
    SellDetail?: boolean | User$SellDetailArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      rentList: Prisma.$RentDetailPayload<ExtArgs>[]
      LentDetail: Prisma.$LentDetailPayload<ExtArgs>[]
      PurchaseDetail: Prisma.$PurchaseDetailPayload<ExtArgs>[]
      SellDetail: Prisma.$SellDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      email: string
      password: string
      firstName: string | null
      lastName: string | null
      phoneNumber: string | null
      address: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    rentList<T extends User$rentListArgs<ExtArgs> = {}>(args?: Subset<T, User$rentListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    LentDetail<T extends User$LentDetailArgs<ExtArgs> = {}>(args?: Subset<T, User$LentDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    PurchaseDetail<T extends User$PurchaseDetailArgs<ExtArgs> = {}>(args?: Subset<T, User$PurchaseDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    SellDetail<T extends User$SellDetailArgs<ExtArgs> = {}>(args?: Subset<T, User$SellDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.rentList
   */
  export type User$rentListArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    where?: RentDetailWhereInput
    orderBy?: RentDetailOrderByWithRelationInput | RentDetailOrderByWithRelationInput[]
    cursor?: RentDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentDetailScalarFieldEnum | RentDetailScalarFieldEnum[]
  }


  /**
   * User.LentDetail
   */
  export type User$LentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    where?: LentDetailWhereInput
    orderBy?: LentDetailOrderByWithRelationInput | LentDetailOrderByWithRelationInput[]
    cursor?: LentDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LentDetailScalarFieldEnum | LentDetailScalarFieldEnum[]
  }


  /**
   * User.PurchaseDetail
   */
  export type User$PurchaseDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    where?: PurchaseDetailWhereInput
    orderBy?: PurchaseDetailOrderByWithRelationInput | PurchaseDetailOrderByWithRelationInput[]
    cursor?: PurchaseDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseDetailScalarFieldEnum | PurchaseDetailScalarFieldEnum[]
  }


  /**
   * User.SellDetail
   */
  export type User$SellDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    where?: SellDetailWhereInput
    orderBy?: SellDetailOrderByWithRelationInput | SellDetailOrderByWithRelationInput[]
    cursor?: SellDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellDetailScalarFieldEnum | SellDetailScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    createdBy: number | null
    rentPrice: number | null
    views: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    createdBy: number | null
    rentPrice: number | null
    views: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    createdBy: number | null
    rentPrice: number | null
    rentType: string | null
    createdAt: Date | null
    views: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    createdBy: number | null
    rentPrice: number | null
    rentType: string | null
    createdAt: Date | null
    views: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    createdBy: number
    rentPrice: number
    rentType: number
    createdAt: number
    views: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    createdBy?: true
    rentPrice?: true
    views?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    createdBy?: true
    rentPrice?: true
    views?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    createdBy?: true
    rentPrice?: true
    rentType?: true
    createdAt?: true
    views?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    createdBy?: true
    rentPrice?: true
    rentType?: true
    createdAt?: true
    views?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    createdBy?: true
    rentPrice?: true
    rentType?: true
    createdAt?: true
    views?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string | null
    price: number | null
    createdBy: number | null
    rentPrice: number | null
    rentType: string | null
    createdAt: Date | null
    views: number | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    createdBy?: boolean
    rentPrice?: boolean
    rentType?: boolean
    createdAt?: boolean
    views?: boolean
    categories?: boolean | Product$categoriesArgs<ExtArgs>
    RentDetail?: boolean | Product$RentDetailArgs<ExtArgs>
    LentDetail?: boolean | Product$LentDetailArgs<ExtArgs>
    PurchaseDetail?: boolean | Product$PurchaseDetailArgs<ExtArgs>
    SellDetail?: boolean | Product$SellDetailArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    createdBy?: boolean
    rentPrice?: boolean
    rentType?: boolean
    createdAt?: boolean
    views?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categories?: boolean | Product$categoriesArgs<ExtArgs>
    RentDetail?: boolean | Product$RentDetailArgs<ExtArgs>
    LentDetail?: boolean | Product$LentDetailArgs<ExtArgs>
    PurchaseDetail?: boolean | Product$PurchaseDetailArgs<ExtArgs>
    SellDetail?: boolean | Product$SellDetailArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      RentDetail: Prisma.$RentDetailPayload<ExtArgs>[]
      LentDetail: Prisma.$LentDetailPayload<ExtArgs>[]
      PurchaseDetail: Prisma.$PurchaseDetailPayload<ExtArgs> | null
      SellDetail: Prisma.$SellDetailPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      description: string | null
      price: number | null
      createdBy: number | null
      rentPrice: number | null
      rentType: string | null
      createdAt: Date | null
      views: number | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categories<T extends Product$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Product$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    RentDetail<T extends Product$RentDetailArgs<ExtArgs> = {}>(args?: Subset<T, Product$RentDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    LentDetail<T extends Product$LentDetailArgs<ExtArgs> = {}>(args?: Subset<T, Product$LentDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    PurchaseDetail<T extends Product$PurchaseDetailArgs<ExtArgs> = {}>(args?: Subset<T, Product$PurchaseDetailArgs<ExtArgs>>): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    SellDetail<T extends Product$SellDetailArgs<ExtArgs> = {}>(args?: Subset<T, Product$SellDetailArgs<ExtArgs>>): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Float'>
    readonly createdBy: FieldRef<"Product", 'Int'>
    readonly rentPrice: FieldRef<"Product", 'Float'>
    readonly rentType: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly views: FieldRef<"Product", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.categories
   */
  export type Product$categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Product.RentDetail
   */
  export type Product$RentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    where?: RentDetailWhereInput
    orderBy?: RentDetailOrderByWithRelationInput | RentDetailOrderByWithRelationInput[]
    cursor?: RentDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentDetailScalarFieldEnum | RentDetailScalarFieldEnum[]
  }


  /**
   * Product.LentDetail
   */
  export type Product$LentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    where?: LentDetailWhereInput
    orderBy?: LentDetailOrderByWithRelationInput | LentDetailOrderByWithRelationInput[]
    cursor?: LentDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LentDetailScalarFieldEnum | LentDetailScalarFieldEnum[]
  }


  /**
   * Product.PurchaseDetail
   */
  export type Product$PurchaseDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    where?: PurchaseDetailWhereInput
  }


  /**
   * Product.SellDetail
   */
  export type Product$SellDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    where?: SellDetailWhereInput
  }


  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
  }



  /**
   * Model RentDetail
   */

  export type AggregateRentDetail = {
    _count: RentDetailCountAggregateOutputType | null
    _avg: RentDetailAvgAggregateOutputType | null
    _sum: RentDetailSumAggregateOutputType | null
    _min: RentDetailMinAggregateOutputType | null
    _max: RentDetailMaxAggregateOutputType | null
  }

  export type RentDetailAvgAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type RentDetailSumAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type RentDetailMinAggregateOutputType = {
    id: number | null
    startDate: Date | null
    endDate: Date | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type RentDetailMaxAggregateOutputType = {
    id: number | null
    startDate: Date | null
    endDate: Date | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type RentDetailCountAggregateOutputType = {
    id: number
    startDate: number
    endDate: number
    totalPrice: number
    productId: number
    userId: number
    _all: number
  }


  export type RentDetailAvgAggregateInputType = {
    id?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type RentDetailSumAggregateInputType = {
    id?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type RentDetailMinAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type RentDetailMaxAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type RentDetailCountAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalPrice?: true
    productId?: true
    userId?: true
    _all?: true
  }

  export type RentDetailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentDetail to aggregate.
     */
    where?: RentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentDetails to fetch.
     */
    orderBy?: RentDetailOrderByWithRelationInput | RentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RentDetails
    **/
    _count?: true | RentDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentDetailMaxAggregateInputType
  }

  export type GetRentDetailAggregateType<T extends RentDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateRentDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRentDetail[P]>
      : GetScalarType<T[P], AggregateRentDetail[P]>
  }




  export type RentDetailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RentDetailWhereInput
    orderBy?: RentDetailOrderByWithAggregationInput | RentDetailOrderByWithAggregationInput[]
    by: RentDetailScalarFieldEnum[] | RentDetailScalarFieldEnum
    having?: RentDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentDetailCountAggregateInputType | true
    _avg?: RentDetailAvgAggregateInputType
    _sum?: RentDetailSumAggregateInputType
    _min?: RentDetailMinAggregateInputType
    _max?: RentDetailMaxAggregateInputType
  }

  export type RentDetailGroupByOutputType = {
    id: number
    startDate: Date
    endDate: Date
    totalPrice: number | null
    productId: number | null
    userId: number | null
    _count: RentDetailCountAggregateOutputType | null
    _avg: RentDetailAvgAggregateOutputType | null
    _sum: RentDetailSumAggregateOutputType | null
    _min: RentDetailMinAggregateOutputType | null
    _max: RentDetailMaxAggregateOutputType | null
  }

  type GetRentDetailGroupByPayload<T extends RentDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentDetailGroupByOutputType[P]>
            : GetScalarType<T[P], RentDetailGroupByOutputType[P]>
        }
      >
    >


  export type RentDetailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    totalPrice?: boolean
    productId?: boolean
    userId?: boolean
    product?: boolean | RentDetail$productArgs<ExtArgs>
    User?: boolean | RentDetail$UserArgs<ExtArgs>
  }, ExtArgs["result"]["rentDetail"]>

  export type RentDetailSelectScalar = {
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    totalPrice?: boolean
    productId?: boolean
    userId?: boolean
  }

  export type RentDetailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | RentDetail$productArgs<ExtArgs>
    User?: boolean | RentDetail$UserArgs<ExtArgs>
  }


  export type $RentDetailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "RentDetail"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      startDate: Date
      endDate: Date
      totalPrice: number | null
      productId: number | null
      userId: number | null
    }, ExtArgs["result"]["rentDetail"]>
    composites: {}
  }


  type RentDetailGetPayload<S extends boolean | null | undefined | RentDetailDefaultArgs> = $Result.GetResult<Prisma.$RentDetailPayload, S>

  type RentDetailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RentDetailFindManyArgs, 'select' | 'include'> & {
      select?: RentDetailCountAggregateInputType | true
    }

  export interface RentDetailDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RentDetail'], meta: { name: 'RentDetail' } }
    /**
     * Find zero or one RentDetail that matches the filter.
     * @param {RentDetailFindUniqueArgs} args - Arguments to find a RentDetail
     * @example
     * // Get one RentDetail
     * const rentDetail = await prisma.rentDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RentDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RentDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RentDetailFindUniqueOrThrowArgs} args - Arguments to find a RentDetail
     * @example
     * // Get one RentDetail
     * const rentDetail = await prisma.rentDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RentDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailFindFirstArgs} args - Arguments to find a RentDetail
     * @example
     * // Get one RentDetail
     * const rentDetail = await prisma.rentDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDetailFindFirstArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RentDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailFindFirstOrThrowArgs} args - Arguments to find a RentDetail
     * @example
     * // Get one RentDetail
     * const rentDetail = await prisma.rentDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RentDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RentDetails
     * const rentDetails = await prisma.rentDetail.findMany()
     * 
     * // Get first 10 RentDetails
     * const rentDetails = await prisma.rentDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentDetailWithIdOnly = await prisma.rentDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RentDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RentDetail.
     * @param {RentDetailCreateArgs} args - Arguments to create a RentDetail.
     * @example
     * // Create one RentDetail
     * const RentDetail = await prisma.rentDetail.create({
     *   data: {
     *     // ... data to create a RentDetail
     *   }
     * })
     * 
    **/
    create<T extends RentDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RentDetailCreateArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RentDetails.
     *     @param {RentDetailCreateManyArgs} args - Arguments to create many RentDetails.
     *     @example
     *     // Create many RentDetails
     *     const rentDetail = await prisma.rentDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RentDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RentDetail.
     * @param {RentDetailDeleteArgs} args - Arguments to delete one RentDetail.
     * @example
     * // Delete one RentDetail
     * const RentDetail = await prisma.rentDetail.delete({
     *   where: {
     *     // ... filter to delete one RentDetail
     *   }
     * })
     * 
    **/
    delete<T extends RentDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RentDetailDeleteArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RentDetail.
     * @param {RentDetailUpdateArgs} args - Arguments to update one RentDetail.
     * @example
     * // Update one RentDetail
     * const rentDetail = await prisma.rentDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RentDetailUpdateArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RentDetails.
     * @param {RentDetailDeleteManyArgs} args - Arguments to filter RentDetails to delete.
     * @example
     * // Delete a few RentDetails
     * const { count } = await prisma.rentDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RentDetails
     * const rentDetail = await prisma.rentDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RentDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RentDetail.
     * @param {RentDetailUpsertArgs} args - Arguments to update or create a RentDetail.
     * @example
     * // Update or create a RentDetail
     * const rentDetail = await prisma.rentDetail.upsert({
     *   create: {
     *     // ... data to create a RentDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RentDetail we want to update
     *   }
     * })
    **/
    upsert<T extends RentDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RentDetailUpsertArgs<ExtArgs>>
    ): Prisma__RentDetailClient<$Result.GetResult<Prisma.$RentDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailCountArgs} args - Arguments to filter RentDetails to count.
     * @example
     * // Count the number of RentDetails
     * const count = await prisma.rentDetail.count({
     *   where: {
     *     // ... the filter for the RentDetails we want to count
     *   }
     * })
    **/
    count<T extends RentDetailCountArgs>(
      args?: Subset<T, RentDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RentDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentDetailAggregateArgs>(args: Subset<T, RentDetailAggregateArgs>): Prisma.PrismaPromise<GetRentDetailAggregateType<T>>

    /**
     * Group by RentDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentDetailGroupByArgs['orderBy'] }
        : { orderBy?: RentDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RentDetail model
   */
  readonly fields: RentDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RentDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentDetailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends RentDetail$productArgs<ExtArgs> = {}>(args?: Subset<T, RentDetail$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    User<T extends RentDetail$UserArgs<ExtArgs> = {}>(args?: Subset<T, RentDetail$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RentDetail model
   */ 
  interface RentDetailFieldRefs {
    readonly id: FieldRef<"RentDetail", 'Int'>
    readonly startDate: FieldRef<"RentDetail", 'DateTime'>
    readonly endDate: FieldRef<"RentDetail", 'DateTime'>
    readonly totalPrice: FieldRef<"RentDetail", 'Float'>
    readonly productId: FieldRef<"RentDetail", 'Int'>
    readonly userId: FieldRef<"RentDetail", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * RentDetail findUnique
   */
  export type RentDetailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * Filter, which RentDetail to fetch.
     */
    where: RentDetailWhereUniqueInput
  }


  /**
   * RentDetail findUniqueOrThrow
   */
  export type RentDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * Filter, which RentDetail to fetch.
     */
    where: RentDetailWhereUniqueInput
  }


  /**
   * RentDetail findFirst
   */
  export type RentDetailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * Filter, which RentDetail to fetch.
     */
    where?: RentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentDetails to fetch.
     */
    orderBy?: RentDetailOrderByWithRelationInput | RentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentDetails.
     */
    cursor?: RentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentDetails.
     */
    distinct?: RentDetailScalarFieldEnum | RentDetailScalarFieldEnum[]
  }


  /**
   * RentDetail findFirstOrThrow
   */
  export type RentDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * Filter, which RentDetail to fetch.
     */
    where?: RentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentDetails to fetch.
     */
    orderBy?: RentDetailOrderByWithRelationInput | RentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentDetails.
     */
    cursor?: RentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentDetails.
     */
    distinct?: RentDetailScalarFieldEnum | RentDetailScalarFieldEnum[]
  }


  /**
   * RentDetail findMany
   */
  export type RentDetailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * Filter, which RentDetails to fetch.
     */
    where?: RentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentDetails to fetch.
     */
    orderBy?: RentDetailOrderByWithRelationInput | RentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RentDetails.
     */
    cursor?: RentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentDetails.
     */
    skip?: number
    distinct?: RentDetailScalarFieldEnum | RentDetailScalarFieldEnum[]
  }


  /**
   * RentDetail create
   */
  export type RentDetailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a RentDetail.
     */
    data: XOR<RentDetailCreateInput, RentDetailUncheckedCreateInput>
  }


  /**
   * RentDetail createMany
   */
  export type RentDetailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RentDetails.
     */
    data: RentDetailCreateManyInput | RentDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RentDetail update
   */
  export type RentDetailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a RentDetail.
     */
    data: XOR<RentDetailUpdateInput, RentDetailUncheckedUpdateInput>
    /**
     * Choose, which RentDetail to update.
     */
    where: RentDetailWhereUniqueInput
  }


  /**
   * RentDetail updateMany
   */
  export type RentDetailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RentDetails.
     */
    data: XOR<RentDetailUpdateManyMutationInput, RentDetailUncheckedUpdateManyInput>
    /**
     * Filter which RentDetails to update
     */
    where?: RentDetailWhereInput
  }


  /**
   * RentDetail upsert
   */
  export type RentDetailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the RentDetail to update in case it exists.
     */
    where: RentDetailWhereUniqueInput
    /**
     * In case the RentDetail found by the `where` argument doesn't exist, create a new RentDetail with this data.
     */
    create: XOR<RentDetailCreateInput, RentDetailUncheckedCreateInput>
    /**
     * In case the RentDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentDetailUpdateInput, RentDetailUncheckedUpdateInput>
  }


  /**
   * RentDetail delete
   */
  export type RentDetailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
    /**
     * Filter which RentDetail to delete.
     */
    where: RentDetailWhereUniqueInput
  }


  /**
   * RentDetail deleteMany
   */
  export type RentDetailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentDetails to delete
     */
    where?: RentDetailWhereInput
  }


  /**
   * RentDetail.product
   */
  export type RentDetail$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }


  /**
   * RentDetail.User
   */
  export type RentDetail$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * RentDetail without action
   */
  export type RentDetailDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentDetail
     */
    select?: RentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentDetailInclude<ExtArgs> | null
  }



  /**
   * Model LentDetail
   */

  export type AggregateLentDetail = {
    _count: LentDetailCountAggregateOutputType | null
    _avg: LentDetailAvgAggregateOutputType | null
    _sum: LentDetailSumAggregateOutputType | null
    _min: LentDetailMinAggregateOutputType | null
    _max: LentDetailMaxAggregateOutputType | null
  }

  export type LentDetailAvgAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type LentDetailSumAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type LentDetailMinAggregateOutputType = {
    id: number | null
    startDate: Date | null
    endDate: Date | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type LentDetailMaxAggregateOutputType = {
    id: number | null
    startDate: Date | null
    endDate: Date | null
    totalPrice: number | null
    productId: number | null
    userId: number | null
  }

  export type LentDetailCountAggregateOutputType = {
    id: number
    startDate: number
    endDate: number
    totalPrice: number
    productId: number
    userId: number
    _all: number
  }


  export type LentDetailAvgAggregateInputType = {
    id?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type LentDetailSumAggregateInputType = {
    id?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type LentDetailMinAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type LentDetailMaxAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalPrice?: true
    productId?: true
    userId?: true
  }

  export type LentDetailCountAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    totalPrice?: true
    productId?: true
    userId?: true
    _all?: true
  }

  export type LentDetailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which LentDetail to aggregate.
     */
    where?: LentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LentDetails to fetch.
     */
    orderBy?: LentDetailOrderByWithRelationInput | LentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LentDetails
    **/
    _count?: true | LentDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LentDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LentDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LentDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LentDetailMaxAggregateInputType
  }

  export type GetLentDetailAggregateType<T extends LentDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateLentDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLentDetail[P]>
      : GetScalarType<T[P], AggregateLentDetail[P]>
  }




  export type LentDetailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LentDetailWhereInput
    orderBy?: LentDetailOrderByWithAggregationInput | LentDetailOrderByWithAggregationInput[]
    by: LentDetailScalarFieldEnum[] | LentDetailScalarFieldEnum
    having?: LentDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LentDetailCountAggregateInputType | true
    _avg?: LentDetailAvgAggregateInputType
    _sum?: LentDetailSumAggregateInputType
    _min?: LentDetailMinAggregateInputType
    _max?: LentDetailMaxAggregateInputType
  }

  export type LentDetailGroupByOutputType = {
    id: number
    startDate: Date
    endDate: Date
    totalPrice: number | null
    productId: number | null
    userId: number | null
    _count: LentDetailCountAggregateOutputType | null
    _avg: LentDetailAvgAggregateOutputType | null
    _sum: LentDetailSumAggregateOutputType | null
    _min: LentDetailMinAggregateOutputType | null
    _max: LentDetailMaxAggregateOutputType | null
  }

  type GetLentDetailGroupByPayload<T extends LentDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LentDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LentDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LentDetailGroupByOutputType[P]>
            : GetScalarType<T[P], LentDetailGroupByOutputType[P]>
        }
      >
    >


  export type LentDetailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    totalPrice?: boolean
    productId?: boolean
    userId?: boolean
    product?: boolean | LentDetail$productArgs<ExtArgs>
    User?: boolean | LentDetail$UserArgs<ExtArgs>
  }, ExtArgs["result"]["lentDetail"]>

  export type LentDetailSelectScalar = {
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    totalPrice?: boolean
    productId?: boolean
    userId?: boolean
  }

  export type LentDetailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | LentDetail$productArgs<ExtArgs>
    User?: boolean | LentDetail$UserArgs<ExtArgs>
  }


  export type $LentDetailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "LentDetail"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      startDate: Date
      endDate: Date
      totalPrice: number | null
      productId: number | null
      userId: number | null
    }, ExtArgs["result"]["lentDetail"]>
    composites: {}
  }


  type LentDetailGetPayload<S extends boolean | null | undefined | LentDetailDefaultArgs> = $Result.GetResult<Prisma.$LentDetailPayload, S>

  type LentDetailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LentDetailFindManyArgs, 'select' | 'include'> & {
      select?: LentDetailCountAggregateInputType | true
    }

  export interface LentDetailDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LentDetail'], meta: { name: 'LentDetail' } }
    /**
     * Find zero or one LentDetail that matches the filter.
     * @param {LentDetailFindUniqueArgs} args - Arguments to find a LentDetail
     * @example
     * // Get one LentDetail
     * const lentDetail = await prisma.lentDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LentDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LentDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LentDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LentDetailFindUniqueOrThrowArgs} args - Arguments to find a LentDetail
     * @example
     * // Get one LentDetail
     * const lentDetail = await prisma.lentDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LentDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LentDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LentDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailFindFirstArgs} args - Arguments to find a LentDetail
     * @example
     * // Get one LentDetail
     * const lentDetail = await prisma.lentDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LentDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LentDetailFindFirstArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LentDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailFindFirstOrThrowArgs} args - Arguments to find a LentDetail
     * @example
     * // Get one LentDetail
     * const lentDetail = await prisma.lentDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LentDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LentDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LentDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LentDetails
     * const lentDetails = await prisma.lentDetail.findMany()
     * 
     * // Get first 10 LentDetails
     * const lentDetails = await prisma.lentDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lentDetailWithIdOnly = await prisma.lentDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LentDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LentDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LentDetail.
     * @param {LentDetailCreateArgs} args - Arguments to create a LentDetail.
     * @example
     * // Create one LentDetail
     * const LentDetail = await prisma.lentDetail.create({
     *   data: {
     *     // ... data to create a LentDetail
     *   }
     * })
     * 
    **/
    create<T extends LentDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LentDetailCreateArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LentDetails.
     *     @param {LentDetailCreateManyArgs} args - Arguments to create many LentDetails.
     *     @example
     *     // Create many LentDetails
     *     const lentDetail = await prisma.lentDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LentDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LentDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LentDetail.
     * @param {LentDetailDeleteArgs} args - Arguments to delete one LentDetail.
     * @example
     * // Delete one LentDetail
     * const LentDetail = await prisma.lentDetail.delete({
     *   where: {
     *     // ... filter to delete one LentDetail
     *   }
     * })
     * 
    **/
    delete<T extends LentDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LentDetailDeleteArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LentDetail.
     * @param {LentDetailUpdateArgs} args - Arguments to update one LentDetail.
     * @example
     * // Update one LentDetail
     * const lentDetail = await prisma.lentDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LentDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LentDetailUpdateArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LentDetails.
     * @param {LentDetailDeleteManyArgs} args - Arguments to filter LentDetails to delete.
     * @example
     * // Delete a few LentDetails
     * const { count } = await prisma.lentDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LentDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LentDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LentDetails
     * const lentDetail = await prisma.lentDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LentDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LentDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LentDetail.
     * @param {LentDetailUpsertArgs} args - Arguments to update or create a LentDetail.
     * @example
     * // Update or create a LentDetail
     * const lentDetail = await prisma.lentDetail.upsert({
     *   create: {
     *     // ... data to create a LentDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LentDetail we want to update
     *   }
     * })
    **/
    upsert<T extends LentDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LentDetailUpsertArgs<ExtArgs>>
    ): Prisma__LentDetailClient<$Result.GetResult<Prisma.$LentDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LentDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailCountArgs} args - Arguments to filter LentDetails to count.
     * @example
     * // Count the number of LentDetails
     * const count = await prisma.lentDetail.count({
     *   where: {
     *     // ... the filter for the LentDetails we want to count
     *   }
     * })
    **/
    count<T extends LentDetailCountArgs>(
      args?: Subset<T, LentDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LentDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LentDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LentDetailAggregateArgs>(args: Subset<T, LentDetailAggregateArgs>): Prisma.PrismaPromise<GetLentDetailAggregateType<T>>

    /**
     * Group by LentDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LentDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LentDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LentDetailGroupByArgs['orderBy'] }
        : { orderBy?: LentDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LentDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLentDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LentDetail model
   */
  readonly fields: LentDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LentDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LentDetailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends LentDetail$productArgs<ExtArgs> = {}>(args?: Subset<T, LentDetail$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    User<T extends LentDetail$UserArgs<ExtArgs> = {}>(args?: Subset<T, LentDetail$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LentDetail model
   */ 
  interface LentDetailFieldRefs {
    readonly id: FieldRef<"LentDetail", 'Int'>
    readonly startDate: FieldRef<"LentDetail", 'DateTime'>
    readonly endDate: FieldRef<"LentDetail", 'DateTime'>
    readonly totalPrice: FieldRef<"LentDetail", 'Float'>
    readonly productId: FieldRef<"LentDetail", 'Int'>
    readonly userId: FieldRef<"LentDetail", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * LentDetail findUnique
   */
  export type LentDetailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * Filter, which LentDetail to fetch.
     */
    where: LentDetailWhereUniqueInput
  }


  /**
   * LentDetail findUniqueOrThrow
   */
  export type LentDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * Filter, which LentDetail to fetch.
     */
    where: LentDetailWhereUniqueInput
  }


  /**
   * LentDetail findFirst
   */
  export type LentDetailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * Filter, which LentDetail to fetch.
     */
    where?: LentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LentDetails to fetch.
     */
    orderBy?: LentDetailOrderByWithRelationInput | LentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LentDetails.
     */
    cursor?: LentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LentDetails.
     */
    distinct?: LentDetailScalarFieldEnum | LentDetailScalarFieldEnum[]
  }


  /**
   * LentDetail findFirstOrThrow
   */
  export type LentDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * Filter, which LentDetail to fetch.
     */
    where?: LentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LentDetails to fetch.
     */
    orderBy?: LentDetailOrderByWithRelationInput | LentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LentDetails.
     */
    cursor?: LentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LentDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LentDetails.
     */
    distinct?: LentDetailScalarFieldEnum | LentDetailScalarFieldEnum[]
  }


  /**
   * LentDetail findMany
   */
  export type LentDetailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * Filter, which LentDetails to fetch.
     */
    where?: LentDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LentDetails to fetch.
     */
    orderBy?: LentDetailOrderByWithRelationInput | LentDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LentDetails.
     */
    cursor?: LentDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LentDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LentDetails.
     */
    skip?: number
    distinct?: LentDetailScalarFieldEnum | LentDetailScalarFieldEnum[]
  }


  /**
   * LentDetail create
   */
  export type LentDetailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a LentDetail.
     */
    data: XOR<LentDetailCreateInput, LentDetailUncheckedCreateInput>
  }


  /**
   * LentDetail createMany
   */
  export type LentDetailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LentDetails.
     */
    data: LentDetailCreateManyInput | LentDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LentDetail update
   */
  export type LentDetailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a LentDetail.
     */
    data: XOR<LentDetailUpdateInput, LentDetailUncheckedUpdateInput>
    /**
     * Choose, which LentDetail to update.
     */
    where: LentDetailWhereUniqueInput
  }


  /**
   * LentDetail updateMany
   */
  export type LentDetailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LentDetails.
     */
    data: XOR<LentDetailUpdateManyMutationInput, LentDetailUncheckedUpdateManyInput>
    /**
     * Filter which LentDetails to update
     */
    where?: LentDetailWhereInput
  }


  /**
   * LentDetail upsert
   */
  export type LentDetailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the LentDetail to update in case it exists.
     */
    where: LentDetailWhereUniqueInput
    /**
     * In case the LentDetail found by the `where` argument doesn't exist, create a new LentDetail with this data.
     */
    create: XOR<LentDetailCreateInput, LentDetailUncheckedCreateInput>
    /**
     * In case the LentDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LentDetailUpdateInput, LentDetailUncheckedUpdateInput>
  }


  /**
   * LentDetail delete
   */
  export type LentDetailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
    /**
     * Filter which LentDetail to delete.
     */
    where: LentDetailWhereUniqueInput
  }


  /**
   * LentDetail deleteMany
   */
  export type LentDetailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which LentDetails to delete
     */
    where?: LentDetailWhereInput
  }


  /**
   * LentDetail.product
   */
  export type LentDetail$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }


  /**
   * LentDetail.User
   */
  export type LentDetail$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * LentDetail without action
   */
  export type LentDetailDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LentDetail
     */
    select?: LentDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LentDetailInclude<ExtArgs> | null
  }



  /**
   * Model PurchaseDetail
   */

  export type AggregatePurchaseDetail = {
    _count: PurchaseDetailCountAggregateOutputType | null
    _avg: PurchaseDetailAvgAggregateOutputType | null
    _sum: PurchaseDetailSumAggregateOutputType | null
    _min: PurchaseDetailMinAggregateOutputType | null
    _max: PurchaseDetailMaxAggregateOutputType | null
  }

  export type PurchaseDetailAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type PurchaseDetailSumAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type PurchaseDetailMinAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type PurchaseDetailMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type PurchaseDetailCountAggregateOutputType = {
    id: number
    productId: number
    userId: number
    _all: number
  }


  export type PurchaseDetailAvgAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type PurchaseDetailSumAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type PurchaseDetailMinAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type PurchaseDetailMaxAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type PurchaseDetailCountAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    _all?: true
  }

  export type PurchaseDetailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseDetail to aggregate.
     */
    where?: PurchaseDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseDetails to fetch.
     */
    orderBy?: PurchaseDetailOrderByWithRelationInput | PurchaseDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseDetails
    **/
    _count?: true | PurchaseDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseDetailMaxAggregateInputType
  }

  export type GetPurchaseDetailAggregateType<T extends PurchaseDetailAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseDetail[P]>
      : GetScalarType<T[P], AggregatePurchaseDetail[P]>
  }




  export type PurchaseDetailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PurchaseDetailWhereInput
    orderBy?: PurchaseDetailOrderByWithAggregationInput | PurchaseDetailOrderByWithAggregationInput[]
    by: PurchaseDetailScalarFieldEnum[] | PurchaseDetailScalarFieldEnum
    having?: PurchaseDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseDetailCountAggregateInputType | true
    _avg?: PurchaseDetailAvgAggregateInputType
    _sum?: PurchaseDetailSumAggregateInputType
    _min?: PurchaseDetailMinAggregateInputType
    _max?: PurchaseDetailMaxAggregateInputType
  }

  export type PurchaseDetailGroupByOutputType = {
    id: number
    productId: number | null
    userId: number | null
    _count: PurchaseDetailCountAggregateOutputType | null
    _avg: PurchaseDetailAvgAggregateOutputType | null
    _sum: PurchaseDetailSumAggregateOutputType | null
    _min: PurchaseDetailMinAggregateOutputType | null
    _max: PurchaseDetailMaxAggregateOutputType | null
  }

  type GetPurchaseDetailGroupByPayload<T extends PurchaseDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseDetailGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseDetailGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseDetailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    userId?: boolean
    product?: boolean | PurchaseDetail$productArgs<ExtArgs>
    User?: boolean | PurchaseDetail$UserArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseDetail"]>

  export type PurchaseDetailSelectScalar = {
    id?: boolean
    productId?: boolean
    userId?: boolean
  }

  export type PurchaseDetailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | PurchaseDetail$productArgs<ExtArgs>
    User?: boolean | PurchaseDetail$UserArgs<ExtArgs>
  }


  export type $PurchaseDetailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PurchaseDetail"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      productId: number | null
      userId: number | null
    }, ExtArgs["result"]["purchaseDetail"]>
    composites: {}
  }


  type PurchaseDetailGetPayload<S extends boolean | null | undefined | PurchaseDetailDefaultArgs> = $Result.GetResult<Prisma.$PurchaseDetailPayload, S>

  type PurchaseDetailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PurchaseDetailFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseDetailCountAggregateInputType | true
    }

  export interface PurchaseDetailDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseDetail'], meta: { name: 'PurchaseDetail' } }
    /**
     * Find zero or one PurchaseDetail that matches the filter.
     * @param {PurchaseDetailFindUniqueArgs} args - Arguments to find a PurchaseDetail
     * @example
     * // Get one PurchaseDetail
     * const purchaseDetail = await prisma.purchaseDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PurchaseDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PurchaseDetailFindUniqueOrThrowArgs} args - Arguments to find a PurchaseDetail
     * @example
     * // Get one PurchaseDetail
     * const purchaseDetail = await prisma.purchaseDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PurchaseDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PurchaseDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailFindFirstArgs} args - Arguments to find a PurchaseDetail
     * @example
     * // Get one PurchaseDetail
     * const purchaseDetail = await prisma.purchaseDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDetailFindFirstArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PurchaseDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailFindFirstOrThrowArgs} args - Arguments to find a PurchaseDetail
     * @example
     * // Get one PurchaseDetail
     * const purchaseDetail = await prisma.purchaseDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PurchaseDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PurchaseDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseDetails
     * const purchaseDetails = await prisma.purchaseDetail.findMany()
     * 
     * // Get first 10 PurchaseDetails
     * const purchaseDetails = await prisma.purchaseDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseDetailWithIdOnly = await prisma.purchaseDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PurchaseDetail.
     * @param {PurchaseDetailCreateArgs} args - Arguments to create a PurchaseDetail.
     * @example
     * // Create one PurchaseDetail
     * const PurchaseDetail = await prisma.purchaseDetail.create({
     *   data: {
     *     // ... data to create a PurchaseDetail
     *   }
     * })
     * 
    **/
    create<T extends PurchaseDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDetailCreateArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PurchaseDetails.
     *     @param {PurchaseDetailCreateManyArgs} args - Arguments to create many PurchaseDetails.
     *     @example
     *     // Create many PurchaseDetails
     *     const purchaseDetail = await prisma.purchaseDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PurchaseDetail.
     * @param {PurchaseDetailDeleteArgs} args - Arguments to delete one PurchaseDetail.
     * @example
     * // Delete one PurchaseDetail
     * const PurchaseDetail = await prisma.purchaseDetail.delete({
     *   where: {
     *     // ... filter to delete one PurchaseDetail
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDetailDeleteArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PurchaseDetail.
     * @param {PurchaseDetailUpdateArgs} args - Arguments to update one PurchaseDetail.
     * @example
     * // Update one PurchaseDetail
     * const purchaseDetail = await prisma.purchaseDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDetailUpdateArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PurchaseDetails.
     * @param {PurchaseDetailDeleteManyArgs} args - Arguments to filter PurchaseDetails to delete.
     * @example
     * // Delete a few PurchaseDetails
     * const { count } = await prisma.purchaseDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseDetails
     * const purchaseDetail = await prisma.purchaseDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseDetail.
     * @param {PurchaseDetailUpsertArgs} args - Arguments to update or create a PurchaseDetail.
     * @example
     * // Update or create a PurchaseDetail
     * const purchaseDetail = await prisma.purchaseDetail.upsert({
     *   create: {
     *     // ... data to create a PurchaseDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseDetail we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseDetailUpsertArgs<ExtArgs>>
    ): Prisma__PurchaseDetailClient<$Result.GetResult<Prisma.$PurchaseDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PurchaseDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailCountArgs} args - Arguments to filter PurchaseDetails to count.
     * @example
     * // Count the number of PurchaseDetails
     * const count = await prisma.purchaseDetail.count({
     *   where: {
     *     // ... the filter for the PurchaseDetails we want to count
     *   }
     * })
    **/
    count<T extends PurchaseDetailCountArgs>(
      args?: Subset<T, PurchaseDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseDetailAggregateArgs>(args: Subset<T, PurchaseDetailAggregateArgs>): Prisma.PrismaPromise<GetPurchaseDetailAggregateType<T>>

    /**
     * Group by PurchaseDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseDetailGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseDetail model
   */
  readonly fields: PurchaseDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseDetailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends PurchaseDetail$productArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseDetail$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    User<T extends PurchaseDetail$UserArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseDetail$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PurchaseDetail model
   */ 
  interface PurchaseDetailFieldRefs {
    readonly id: FieldRef<"PurchaseDetail", 'Int'>
    readonly productId: FieldRef<"PurchaseDetail", 'Int'>
    readonly userId: FieldRef<"PurchaseDetail", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * PurchaseDetail findUnique
   */
  export type PurchaseDetailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseDetail to fetch.
     */
    where: PurchaseDetailWhereUniqueInput
  }


  /**
   * PurchaseDetail findUniqueOrThrow
   */
  export type PurchaseDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseDetail to fetch.
     */
    where: PurchaseDetailWhereUniqueInput
  }


  /**
   * PurchaseDetail findFirst
   */
  export type PurchaseDetailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseDetail to fetch.
     */
    where?: PurchaseDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseDetails to fetch.
     */
    orderBy?: PurchaseDetailOrderByWithRelationInput | PurchaseDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseDetails.
     */
    cursor?: PurchaseDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseDetails.
     */
    distinct?: PurchaseDetailScalarFieldEnum | PurchaseDetailScalarFieldEnum[]
  }


  /**
   * PurchaseDetail findFirstOrThrow
   */
  export type PurchaseDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseDetail to fetch.
     */
    where?: PurchaseDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseDetails to fetch.
     */
    orderBy?: PurchaseDetailOrderByWithRelationInput | PurchaseDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseDetails.
     */
    cursor?: PurchaseDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseDetails.
     */
    distinct?: PurchaseDetailScalarFieldEnum | PurchaseDetailScalarFieldEnum[]
  }


  /**
   * PurchaseDetail findMany
   */
  export type PurchaseDetailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseDetails to fetch.
     */
    where?: PurchaseDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseDetails to fetch.
     */
    orderBy?: PurchaseDetailOrderByWithRelationInput | PurchaseDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseDetails.
     */
    cursor?: PurchaseDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseDetails.
     */
    skip?: number
    distinct?: PurchaseDetailScalarFieldEnum | PurchaseDetailScalarFieldEnum[]
  }


  /**
   * PurchaseDetail create
   */
  export type PurchaseDetailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseDetail.
     */
    data?: XOR<PurchaseDetailCreateInput, PurchaseDetailUncheckedCreateInput>
  }


  /**
   * PurchaseDetail createMany
   */
  export type PurchaseDetailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseDetails.
     */
    data: PurchaseDetailCreateManyInput | PurchaseDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PurchaseDetail update
   */
  export type PurchaseDetailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseDetail.
     */
    data: XOR<PurchaseDetailUpdateInput, PurchaseDetailUncheckedUpdateInput>
    /**
     * Choose, which PurchaseDetail to update.
     */
    where: PurchaseDetailWhereUniqueInput
  }


  /**
   * PurchaseDetail updateMany
   */
  export type PurchaseDetailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseDetails.
     */
    data: XOR<PurchaseDetailUpdateManyMutationInput, PurchaseDetailUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseDetails to update
     */
    where?: PurchaseDetailWhereInput
  }


  /**
   * PurchaseDetail upsert
   */
  export type PurchaseDetailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseDetail to update in case it exists.
     */
    where: PurchaseDetailWhereUniqueInput
    /**
     * In case the PurchaseDetail found by the `where` argument doesn't exist, create a new PurchaseDetail with this data.
     */
    create: XOR<PurchaseDetailCreateInput, PurchaseDetailUncheckedCreateInput>
    /**
     * In case the PurchaseDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseDetailUpdateInput, PurchaseDetailUncheckedUpdateInput>
  }


  /**
   * PurchaseDetail delete
   */
  export type PurchaseDetailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
    /**
     * Filter which PurchaseDetail to delete.
     */
    where: PurchaseDetailWhereUniqueInput
  }


  /**
   * PurchaseDetail deleteMany
   */
  export type PurchaseDetailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseDetails to delete
     */
    where?: PurchaseDetailWhereInput
  }


  /**
   * PurchaseDetail.product
   */
  export type PurchaseDetail$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }


  /**
   * PurchaseDetail.User
   */
  export type PurchaseDetail$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * PurchaseDetail without action
   */
  export type PurchaseDetailDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseDetail
     */
    select?: PurchaseDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseDetailInclude<ExtArgs> | null
  }



  /**
   * Model SellDetail
   */

  export type AggregateSellDetail = {
    _count: SellDetailCountAggregateOutputType | null
    _avg: SellDetailAvgAggregateOutputType | null
    _sum: SellDetailSumAggregateOutputType | null
    _min: SellDetailMinAggregateOutputType | null
    _max: SellDetailMaxAggregateOutputType | null
  }

  export type SellDetailAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type SellDetailSumAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type SellDetailMinAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type SellDetailMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    userId: number | null
  }

  export type SellDetailCountAggregateOutputType = {
    id: number
    productId: number
    userId: number
    _all: number
  }


  export type SellDetailAvgAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type SellDetailSumAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type SellDetailMinAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type SellDetailMaxAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
  }

  export type SellDetailCountAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    _all?: true
  }

  export type SellDetailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellDetail to aggregate.
     */
    where?: SellDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellDetails to fetch.
     */
    orderBy?: SellDetailOrderByWithRelationInput | SellDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SellDetails
    **/
    _count?: true | SellDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellDetailMaxAggregateInputType
  }

  export type GetSellDetailAggregateType<T extends SellDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateSellDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSellDetail[P]>
      : GetScalarType<T[P], AggregateSellDetail[P]>
  }




  export type SellDetailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SellDetailWhereInput
    orderBy?: SellDetailOrderByWithAggregationInput | SellDetailOrderByWithAggregationInput[]
    by: SellDetailScalarFieldEnum[] | SellDetailScalarFieldEnum
    having?: SellDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellDetailCountAggregateInputType | true
    _avg?: SellDetailAvgAggregateInputType
    _sum?: SellDetailSumAggregateInputType
    _min?: SellDetailMinAggregateInputType
    _max?: SellDetailMaxAggregateInputType
  }

  export type SellDetailGroupByOutputType = {
    id: number
    productId: number | null
    userId: number | null
    _count: SellDetailCountAggregateOutputType | null
    _avg: SellDetailAvgAggregateOutputType | null
    _sum: SellDetailSumAggregateOutputType | null
    _min: SellDetailMinAggregateOutputType | null
    _max: SellDetailMaxAggregateOutputType | null
  }

  type GetSellDetailGroupByPayload<T extends SellDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellDetailGroupByOutputType[P]>
            : GetScalarType<T[P], SellDetailGroupByOutputType[P]>
        }
      >
    >


  export type SellDetailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    userId?: boolean
    product?: boolean | SellDetail$productArgs<ExtArgs>
    User?: boolean | SellDetail$UserArgs<ExtArgs>
  }, ExtArgs["result"]["sellDetail"]>

  export type SellDetailSelectScalar = {
    id?: boolean
    productId?: boolean
    userId?: boolean
  }

  export type SellDetailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | SellDetail$productArgs<ExtArgs>
    User?: boolean | SellDetail$UserArgs<ExtArgs>
  }


  export type $SellDetailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SellDetail"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      productId: number | null
      userId: number | null
    }, ExtArgs["result"]["sellDetail"]>
    composites: {}
  }


  type SellDetailGetPayload<S extends boolean | null | undefined | SellDetailDefaultArgs> = $Result.GetResult<Prisma.$SellDetailPayload, S>

  type SellDetailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SellDetailFindManyArgs, 'select' | 'include'> & {
      select?: SellDetailCountAggregateInputType | true
    }

  export interface SellDetailDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SellDetail'], meta: { name: 'SellDetail' } }
    /**
     * Find zero or one SellDetail that matches the filter.
     * @param {SellDetailFindUniqueArgs} args - Arguments to find a SellDetail
     * @example
     * // Get one SellDetail
     * const sellDetail = await prisma.sellDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SellDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SellDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SellDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SellDetailFindUniqueOrThrowArgs} args - Arguments to find a SellDetail
     * @example
     * // Get one SellDetail
     * const sellDetail = await prisma.sellDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SellDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SellDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailFindFirstArgs} args - Arguments to find a SellDetail
     * @example
     * // Get one SellDetail
     * const sellDetail = await prisma.sellDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SellDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDetailFindFirstArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SellDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailFindFirstOrThrowArgs} args - Arguments to find a SellDetail
     * @example
     * // Get one SellDetail
     * const sellDetail = await prisma.sellDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SellDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SellDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SellDetails
     * const sellDetails = await prisma.sellDetail.findMany()
     * 
     * // Get first 10 SellDetails
     * const sellDetails = await prisma.sellDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellDetailWithIdOnly = await prisma.sellDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SellDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SellDetail.
     * @param {SellDetailCreateArgs} args - Arguments to create a SellDetail.
     * @example
     * // Create one SellDetail
     * const SellDetail = await prisma.sellDetail.create({
     *   data: {
     *     // ... data to create a SellDetail
     *   }
     * })
     * 
    **/
    create<T extends SellDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SellDetailCreateArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SellDetails.
     *     @param {SellDetailCreateManyArgs} args - Arguments to create many SellDetails.
     *     @example
     *     // Create many SellDetails
     *     const sellDetail = await prisma.sellDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SellDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SellDetail.
     * @param {SellDetailDeleteArgs} args - Arguments to delete one SellDetail.
     * @example
     * // Delete one SellDetail
     * const SellDetail = await prisma.sellDetail.delete({
     *   where: {
     *     // ... filter to delete one SellDetail
     *   }
     * })
     * 
    **/
    delete<T extends SellDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SellDetailDeleteArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SellDetail.
     * @param {SellDetailUpdateArgs} args - Arguments to update one SellDetail.
     * @example
     * // Update one SellDetail
     * const sellDetail = await prisma.sellDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SellDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SellDetailUpdateArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SellDetails.
     * @param {SellDetailDeleteManyArgs} args - Arguments to filter SellDetails to delete.
     * @example
     * // Delete a few SellDetails
     * const { count } = await prisma.sellDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SellDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SellDetails
     * const sellDetail = await prisma.sellDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SellDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SellDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SellDetail.
     * @param {SellDetailUpsertArgs} args - Arguments to update or create a SellDetail.
     * @example
     * // Update or create a SellDetail
     * const sellDetail = await prisma.sellDetail.upsert({
     *   create: {
     *     // ... data to create a SellDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SellDetail we want to update
     *   }
     * })
    **/
    upsert<T extends SellDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SellDetailUpsertArgs<ExtArgs>>
    ): Prisma__SellDetailClient<$Result.GetResult<Prisma.$SellDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SellDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailCountArgs} args - Arguments to filter SellDetails to count.
     * @example
     * // Count the number of SellDetails
     * const count = await prisma.sellDetail.count({
     *   where: {
     *     // ... the filter for the SellDetails we want to count
     *   }
     * })
    **/
    count<T extends SellDetailCountArgs>(
      args?: Subset<T, SellDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SellDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellDetailAggregateArgs>(args: Subset<T, SellDetailAggregateArgs>): Prisma.PrismaPromise<GetSellDetailAggregateType<T>>

    /**
     * Group by SellDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellDetailGroupByArgs['orderBy'] }
        : { orderBy?: SellDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SellDetail model
   */
  readonly fields: SellDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SellDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SellDetailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends SellDetail$productArgs<ExtArgs> = {}>(args?: Subset<T, SellDetail$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    User<T extends SellDetail$UserArgs<ExtArgs> = {}>(args?: Subset<T, SellDetail$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SellDetail model
   */ 
  interface SellDetailFieldRefs {
    readonly id: FieldRef<"SellDetail", 'Int'>
    readonly productId: FieldRef<"SellDetail", 'Int'>
    readonly userId: FieldRef<"SellDetail", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SellDetail findUnique
   */
  export type SellDetailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * Filter, which SellDetail to fetch.
     */
    where: SellDetailWhereUniqueInput
  }


  /**
   * SellDetail findUniqueOrThrow
   */
  export type SellDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * Filter, which SellDetail to fetch.
     */
    where: SellDetailWhereUniqueInput
  }


  /**
   * SellDetail findFirst
   */
  export type SellDetailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * Filter, which SellDetail to fetch.
     */
    where?: SellDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellDetails to fetch.
     */
    orderBy?: SellDetailOrderByWithRelationInput | SellDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellDetails.
     */
    cursor?: SellDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellDetails.
     */
    distinct?: SellDetailScalarFieldEnum | SellDetailScalarFieldEnum[]
  }


  /**
   * SellDetail findFirstOrThrow
   */
  export type SellDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * Filter, which SellDetail to fetch.
     */
    where?: SellDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellDetails to fetch.
     */
    orderBy?: SellDetailOrderByWithRelationInput | SellDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellDetails.
     */
    cursor?: SellDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellDetails.
     */
    distinct?: SellDetailScalarFieldEnum | SellDetailScalarFieldEnum[]
  }


  /**
   * SellDetail findMany
   */
  export type SellDetailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * Filter, which SellDetails to fetch.
     */
    where?: SellDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellDetails to fetch.
     */
    orderBy?: SellDetailOrderByWithRelationInput | SellDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SellDetails.
     */
    cursor?: SellDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellDetails.
     */
    skip?: number
    distinct?: SellDetailScalarFieldEnum | SellDetailScalarFieldEnum[]
  }


  /**
   * SellDetail create
   */
  export type SellDetailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a SellDetail.
     */
    data?: XOR<SellDetailCreateInput, SellDetailUncheckedCreateInput>
  }


  /**
   * SellDetail createMany
   */
  export type SellDetailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SellDetails.
     */
    data: SellDetailCreateManyInput | SellDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SellDetail update
   */
  export type SellDetailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a SellDetail.
     */
    data: XOR<SellDetailUpdateInput, SellDetailUncheckedUpdateInput>
    /**
     * Choose, which SellDetail to update.
     */
    where: SellDetailWhereUniqueInput
  }


  /**
   * SellDetail updateMany
   */
  export type SellDetailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SellDetails.
     */
    data: XOR<SellDetailUpdateManyMutationInput, SellDetailUncheckedUpdateManyInput>
    /**
     * Filter which SellDetails to update
     */
    where?: SellDetailWhereInput
  }


  /**
   * SellDetail upsert
   */
  export type SellDetailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the SellDetail to update in case it exists.
     */
    where: SellDetailWhereUniqueInput
    /**
     * In case the SellDetail found by the `where` argument doesn't exist, create a new SellDetail with this data.
     */
    create: XOR<SellDetailCreateInput, SellDetailUncheckedCreateInput>
    /**
     * In case the SellDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellDetailUpdateInput, SellDetailUncheckedUpdateInput>
  }


  /**
   * SellDetail delete
   */
  export type SellDetailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
    /**
     * Filter which SellDetail to delete.
     */
    where: SellDetailWhereUniqueInput
  }


  /**
   * SellDetail deleteMany
   */
  export type SellDetailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellDetails to delete
     */
    where?: SellDetailWhereInput
  }


  /**
   * SellDetail.product
   */
  export type SellDetail$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }


  /**
   * SellDetail.User
   */
  export type SellDetail$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * SellDetail without action
   */
  export type SellDetailDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellDetail
     */
    select?: SellDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellDetailInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    address: 'address'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    createdBy: 'createdBy',
    rentPrice: 'rentPrice',
    rentType: 'rentType',
    createdAt: 'createdAt',
    views: 'views'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const RentDetailScalarFieldEnum: {
    id: 'id',
    startDate: 'startDate',
    endDate: 'endDate',
    totalPrice: 'totalPrice',
    productId: 'productId',
    userId: 'userId'
  };

  export type RentDetailScalarFieldEnum = (typeof RentDetailScalarFieldEnum)[keyof typeof RentDetailScalarFieldEnum]


  export const LentDetailScalarFieldEnum: {
    id: 'id',
    startDate: 'startDate',
    endDate: 'endDate',
    totalPrice: 'totalPrice',
    productId: 'productId',
    userId: 'userId'
  };

  export type LentDetailScalarFieldEnum = (typeof LentDetailScalarFieldEnum)[keyof typeof LentDetailScalarFieldEnum]


  export const PurchaseDetailScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    userId: 'userId'
  };

  export type PurchaseDetailScalarFieldEnum = (typeof PurchaseDetailScalarFieldEnum)[keyof typeof PurchaseDetailScalarFieldEnum]


  export const SellDetailScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    userId: 'userId'
  };

  export type SellDetailScalarFieldEnum = (typeof SellDetailScalarFieldEnum)[keyof typeof SellDetailScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    rentList?: RentDetailListRelationFilter
    LentDetail?: LentDetailListRelationFilter
    PurchaseDetail?: PurchaseDetailListRelationFilter
    SellDetail?: SellDetailListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    rentList?: RentDetailOrderByRelationAggregateInput
    LentDetail?: LentDetailOrderByRelationAggregateInput
    PurchaseDetail?: PurchaseDetailOrderByRelationAggregateInput
    SellDetail?: SellDetailOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    rentList?: RentDetailListRelationFilter
    LentDetail?: LentDetailListRelationFilter
    PurchaseDetail?: PurchaseDetailListRelationFilter
    SellDetail?: SellDetailListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: FloatNullableFilter<"Product"> | number | null
    createdBy?: IntNullableFilter<"Product"> | number | null
    rentPrice?: FloatNullableFilter<"Product"> | number | null
    rentType?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    views?: IntNullableFilter<"Product"> | number | null
    categories?: CategoryListRelationFilter
    RentDetail?: RentDetailListRelationFilter
    LentDetail?: LentDetailListRelationFilter
    PurchaseDetail?: XOR<PurchaseDetailNullableRelationFilter, PurchaseDetailWhereInput> | null
    SellDetail?: XOR<SellDetailNullableRelationFilter, SellDetailWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    rentPrice?: SortOrderInput | SortOrder
    rentType?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    views?: SortOrderInput | SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    RentDetail?: RentDetailOrderByRelationAggregateInput
    LentDetail?: LentDetailOrderByRelationAggregateInput
    PurchaseDetail?: PurchaseDetailOrderByWithRelationInput
    SellDetail?: SellDetailOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: FloatNullableFilter<"Product"> | number | null
    createdBy?: IntNullableFilter<"Product"> | number | null
    rentPrice?: FloatNullableFilter<"Product"> | number | null
    rentType?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    views?: IntNullableFilter<"Product"> | number | null
    categories?: CategoryListRelationFilter
    RentDetail?: RentDetailListRelationFilter
    LentDetail?: LentDetailListRelationFilter
    PurchaseDetail?: XOR<PurchaseDetailNullableRelationFilter, PurchaseDetailWhereInput> | null
    SellDetail?: XOR<SellDetailNullableRelationFilter, SellDetailWhereInput> | null
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    rentPrice?: SortOrderInput | SortOrder
    rentType?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    views?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    price?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    createdBy?: IntNullableWithAggregatesFilter<"Product"> | number | null
    rentPrice?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    rentType?: StringNullableWithAggregatesFilter<"Product"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    views?: IntNullableWithAggregatesFilter<"Product"> | number | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    products?: ProductListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type RentDetailWhereInput = {
    AND?: RentDetailWhereInput | RentDetailWhereInput[]
    OR?: RentDetailWhereInput[]
    NOT?: RentDetailWhereInput | RentDetailWhereInput[]
    id?: IntFilter<"RentDetail"> | number
    startDate?: DateTimeFilter<"RentDetail"> | Date | string
    endDate?: DateTimeFilter<"RentDetail"> | Date | string
    totalPrice?: FloatNullableFilter<"RentDetail"> | number | null
    productId?: IntNullableFilter<"RentDetail"> | number | null
    userId?: IntNullableFilter<"RentDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type RentDetailOrderByWithRelationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type RentDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RentDetailWhereInput | RentDetailWhereInput[]
    OR?: RentDetailWhereInput[]
    NOT?: RentDetailWhereInput | RentDetailWhereInput[]
    startDate?: DateTimeFilter<"RentDetail"> | Date | string
    endDate?: DateTimeFilter<"RentDetail"> | Date | string
    totalPrice?: FloatNullableFilter<"RentDetail"> | number | null
    productId?: IntNullableFilter<"RentDetail"> | number | null
    userId?: IntNullableFilter<"RentDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type RentDetailOrderByWithAggregationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: RentDetailCountOrderByAggregateInput
    _avg?: RentDetailAvgOrderByAggregateInput
    _max?: RentDetailMaxOrderByAggregateInput
    _min?: RentDetailMinOrderByAggregateInput
    _sum?: RentDetailSumOrderByAggregateInput
  }

  export type RentDetailScalarWhereWithAggregatesInput = {
    AND?: RentDetailScalarWhereWithAggregatesInput | RentDetailScalarWhereWithAggregatesInput[]
    OR?: RentDetailScalarWhereWithAggregatesInput[]
    NOT?: RentDetailScalarWhereWithAggregatesInput | RentDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RentDetail"> | number
    startDate?: DateTimeWithAggregatesFilter<"RentDetail"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"RentDetail"> | Date | string
    totalPrice?: FloatNullableWithAggregatesFilter<"RentDetail"> | number | null
    productId?: IntNullableWithAggregatesFilter<"RentDetail"> | number | null
    userId?: IntNullableWithAggregatesFilter<"RentDetail"> | number | null
  }

  export type LentDetailWhereInput = {
    AND?: LentDetailWhereInput | LentDetailWhereInput[]
    OR?: LentDetailWhereInput[]
    NOT?: LentDetailWhereInput | LentDetailWhereInput[]
    id?: IntFilter<"LentDetail"> | number
    startDate?: DateTimeFilter<"LentDetail"> | Date | string
    endDate?: DateTimeFilter<"LentDetail"> | Date | string
    totalPrice?: FloatNullableFilter<"LentDetail"> | number | null
    productId?: IntNullableFilter<"LentDetail"> | number | null
    userId?: IntNullableFilter<"LentDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type LentDetailOrderByWithRelationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type LentDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LentDetailWhereInput | LentDetailWhereInput[]
    OR?: LentDetailWhereInput[]
    NOT?: LentDetailWhereInput | LentDetailWhereInput[]
    startDate?: DateTimeFilter<"LentDetail"> | Date | string
    endDate?: DateTimeFilter<"LentDetail"> | Date | string
    totalPrice?: FloatNullableFilter<"LentDetail"> | number | null
    productId?: IntNullableFilter<"LentDetail"> | number | null
    userId?: IntNullableFilter<"LentDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type LentDetailOrderByWithAggregationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: LentDetailCountOrderByAggregateInput
    _avg?: LentDetailAvgOrderByAggregateInput
    _max?: LentDetailMaxOrderByAggregateInput
    _min?: LentDetailMinOrderByAggregateInput
    _sum?: LentDetailSumOrderByAggregateInput
  }

  export type LentDetailScalarWhereWithAggregatesInput = {
    AND?: LentDetailScalarWhereWithAggregatesInput | LentDetailScalarWhereWithAggregatesInput[]
    OR?: LentDetailScalarWhereWithAggregatesInput[]
    NOT?: LentDetailScalarWhereWithAggregatesInput | LentDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LentDetail"> | number
    startDate?: DateTimeWithAggregatesFilter<"LentDetail"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LentDetail"> | Date | string
    totalPrice?: FloatNullableWithAggregatesFilter<"LentDetail"> | number | null
    productId?: IntNullableWithAggregatesFilter<"LentDetail"> | number | null
    userId?: IntNullableWithAggregatesFilter<"LentDetail"> | number | null
  }

  export type PurchaseDetailWhereInput = {
    AND?: PurchaseDetailWhereInput | PurchaseDetailWhereInput[]
    OR?: PurchaseDetailWhereInput[]
    NOT?: PurchaseDetailWhereInput | PurchaseDetailWhereInput[]
    id?: IntFilter<"PurchaseDetail"> | number
    productId?: IntNullableFilter<"PurchaseDetail"> | number | null
    userId?: IntNullableFilter<"PurchaseDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type PurchaseDetailOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type PurchaseDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productId?: number
    AND?: PurchaseDetailWhereInput | PurchaseDetailWhereInput[]
    OR?: PurchaseDetailWhereInput[]
    NOT?: PurchaseDetailWhereInput | PurchaseDetailWhereInput[]
    userId?: IntNullableFilter<"PurchaseDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "productId">

  export type PurchaseDetailOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: PurchaseDetailCountOrderByAggregateInput
    _avg?: PurchaseDetailAvgOrderByAggregateInput
    _max?: PurchaseDetailMaxOrderByAggregateInput
    _min?: PurchaseDetailMinOrderByAggregateInput
    _sum?: PurchaseDetailSumOrderByAggregateInput
  }

  export type PurchaseDetailScalarWhereWithAggregatesInput = {
    AND?: PurchaseDetailScalarWhereWithAggregatesInput | PurchaseDetailScalarWhereWithAggregatesInput[]
    OR?: PurchaseDetailScalarWhereWithAggregatesInput[]
    NOT?: PurchaseDetailScalarWhereWithAggregatesInput | PurchaseDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PurchaseDetail"> | number
    productId?: IntNullableWithAggregatesFilter<"PurchaseDetail"> | number | null
    userId?: IntNullableWithAggregatesFilter<"PurchaseDetail"> | number | null
  }

  export type SellDetailWhereInput = {
    AND?: SellDetailWhereInput | SellDetailWhereInput[]
    OR?: SellDetailWhereInput[]
    NOT?: SellDetailWhereInput | SellDetailWhereInput[]
    id?: IntFilter<"SellDetail"> | number
    productId?: IntNullableFilter<"SellDetail"> | number | null
    userId?: IntNullableFilter<"SellDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type SellDetailOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type SellDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productId?: number
    AND?: SellDetailWhereInput | SellDetailWhereInput[]
    OR?: SellDetailWhereInput[]
    NOT?: SellDetailWhereInput | SellDetailWhereInput[]
    userId?: IntNullableFilter<"SellDetail"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "productId">

  export type SellDetailOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: SellDetailCountOrderByAggregateInput
    _avg?: SellDetailAvgOrderByAggregateInput
    _max?: SellDetailMaxOrderByAggregateInput
    _min?: SellDetailMinOrderByAggregateInput
    _sum?: SellDetailSumOrderByAggregateInput
  }

  export type SellDetailScalarWhereWithAggregatesInput = {
    AND?: SellDetailScalarWhereWithAggregatesInput | SellDetailScalarWhereWithAggregatesInput[]
    OR?: SellDetailScalarWhereWithAggregatesInput[]
    NOT?: SellDetailScalarWhereWithAggregatesInput | SellDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SellDetail"> | number
    productId?: IntNullableWithAggregatesFilter<"SellDetail"> | number | null
    userId?: IntNullableWithAggregatesFilter<"SellDetail"> | number | null
  }

  export type UserCreateInput = {
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailCreateNestedManyWithoutUserInput
    LentDetail?: LentDetailCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailUncheckedCreateNestedManyWithoutUserInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUpdateManyWithoutUserNestedInput
    LentDetail?: LentDetailUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUncheckedUpdateManyWithoutUserNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateInput = {
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryUncheckedCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailUncheckedCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUncheckedUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUncheckedUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoryCreateInput = {
    name: string
    products?: ProductCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    products?: ProductUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    products?: ProductUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    products?: ProductUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RentDetailCreateInput = {
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    product?: ProductCreateNestedOneWithoutRentDetailInput
    User?: UserCreateNestedOneWithoutRentListInput
  }

  export type RentDetailUncheckedCreateInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
    userId?: number | null
  }

  export type RentDetailUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneWithoutRentDetailNestedInput
    User?: UserUpdateOneWithoutRentListNestedInput
  }

  export type RentDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentDetailCreateManyInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
    userId?: number | null
  }

  export type RentDetailUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RentDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LentDetailCreateInput = {
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    product?: ProductCreateNestedOneWithoutLentDetailInput
    User?: UserCreateNestedOneWithoutLentDetailInput
  }

  export type LentDetailUncheckedCreateInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
    userId?: number | null
  }

  export type LentDetailUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneWithoutLentDetailNestedInput
    User?: UserUpdateOneWithoutLentDetailNestedInput
  }

  export type LentDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LentDetailCreateManyInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
    userId?: number | null
  }

  export type LentDetailUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type LentDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseDetailCreateInput = {
    product?: ProductCreateNestedOneWithoutPurchaseDetailInput
    User?: UserCreateNestedOneWithoutPurchaseDetailInput
  }

  export type PurchaseDetailUncheckedCreateInput = {
    id?: number
    productId?: number | null
    userId?: number | null
  }

  export type PurchaseDetailUpdateInput = {
    product?: ProductUpdateOneWithoutPurchaseDetailNestedInput
    User?: UserUpdateOneWithoutPurchaseDetailNestedInput
  }

  export type PurchaseDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseDetailCreateManyInput = {
    id?: number
    productId?: number | null
    userId?: number | null
  }

  export type PurchaseDetailUpdateManyMutationInput = {

  }

  export type PurchaseDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SellDetailCreateInput = {
    product?: ProductCreateNestedOneWithoutSellDetailInput
    User?: UserCreateNestedOneWithoutSellDetailInput
  }

  export type SellDetailUncheckedCreateInput = {
    id?: number
    productId?: number | null
    userId?: number | null
  }

  export type SellDetailUpdateInput = {
    product?: ProductUpdateOneWithoutSellDetailNestedInput
    User?: UserUpdateOneWithoutSellDetailNestedInput
  }

  export type SellDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SellDetailCreateManyInput = {
    id?: number
    productId?: number | null
    userId?: number | null
  }

  export type SellDetailUpdateManyMutationInput = {

  }

  export type SellDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RentDetailListRelationFilter = {
    every?: RentDetailWhereInput
    some?: RentDetailWhereInput
    none?: RentDetailWhereInput
  }

  export type LentDetailListRelationFilter = {
    every?: LentDetailWhereInput
    some?: LentDetailWhereInput
    none?: LentDetailWhereInput
  }

  export type PurchaseDetailListRelationFilter = {
    every?: PurchaseDetailWhereInput
    some?: PurchaseDetailWhereInput
    none?: PurchaseDetailWhereInput
  }

  export type SellDetailListRelationFilter = {
    every?: SellDetailWhereInput
    some?: SellDetailWhereInput
    none?: SellDetailWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RentDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LentDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SellDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type PurchaseDetailNullableRelationFilter = {
    is?: PurchaseDetailWhereInput | null
    isNot?: PurchaseDetailWhereInput | null
  }

  export type SellDetailNullableRelationFilter = {
    is?: SellDetailWhereInput | null
    isNot?: SellDetailWhereInput | null
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    createdBy?: SortOrder
    rentPrice?: SortOrder
    rentType?: SortOrder
    createdAt?: SortOrder
    views?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    createdBy?: SortOrder
    rentPrice?: SortOrder
    views?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    createdBy?: SortOrder
    rentPrice?: SortOrder
    rentType?: SortOrder
    createdAt?: SortOrder
    views?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    createdBy?: SortOrder
    rentPrice?: SortOrder
    rentType?: SortOrder
    createdAt?: SortOrder
    views?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    createdBy?: SortOrder
    rentPrice?: SortOrder
    views?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProductNullableRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RentDetailCountOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type RentDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type RentDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type RentDetailMinOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type RentDetailSumOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LentDetailCountOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type LentDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type LentDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type LentDetailMinOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type LentDetailSumOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseDetailCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseDetailMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseDetailSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type SellDetailCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type SellDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type SellDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type SellDetailMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type SellDetailSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
  }

  export type RentDetailCreateNestedManyWithoutUserInput = {
    create?: XOR<RentDetailCreateWithoutUserInput, RentDetailUncheckedCreateWithoutUserInput> | RentDetailCreateWithoutUserInput[] | RentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutUserInput | RentDetailCreateOrConnectWithoutUserInput[]
    createMany?: RentDetailCreateManyUserInputEnvelope
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
  }

  export type LentDetailCreateNestedManyWithoutUserInput = {
    create?: XOR<LentDetailCreateWithoutUserInput, LentDetailUncheckedCreateWithoutUserInput> | LentDetailCreateWithoutUserInput[] | LentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutUserInput | LentDetailCreateOrConnectWithoutUserInput[]
    createMany?: LentDetailCreateManyUserInputEnvelope
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
  }

  export type PurchaseDetailCreateNestedManyWithoutUserInput = {
    create?: XOR<PurchaseDetailCreateWithoutUserInput, PurchaseDetailUncheckedCreateWithoutUserInput> | PurchaseDetailCreateWithoutUserInput[] | PurchaseDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutUserInput | PurchaseDetailCreateOrConnectWithoutUserInput[]
    createMany?: PurchaseDetailCreateManyUserInputEnvelope
    connect?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
  }

  export type SellDetailCreateNestedManyWithoutUserInput = {
    create?: XOR<SellDetailCreateWithoutUserInput, SellDetailUncheckedCreateWithoutUserInput> | SellDetailCreateWithoutUserInput[] | SellDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellDetailCreateOrConnectWithoutUserInput | SellDetailCreateOrConnectWithoutUserInput[]
    createMany?: SellDetailCreateManyUserInputEnvelope
    connect?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
  }

  export type RentDetailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RentDetailCreateWithoutUserInput, RentDetailUncheckedCreateWithoutUserInput> | RentDetailCreateWithoutUserInput[] | RentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutUserInput | RentDetailCreateOrConnectWithoutUserInput[]
    createMany?: RentDetailCreateManyUserInputEnvelope
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
  }

  export type LentDetailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LentDetailCreateWithoutUserInput, LentDetailUncheckedCreateWithoutUserInput> | LentDetailCreateWithoutUserInput[] | LentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutUserInput | LentDetailCreateOrConnectWithoutUserInput[]
    createMany?: LentDetailCreateManyUserInputEnvelope
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
  }

  export type PurchaseDetailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PurchaseDetailCreateWithoutUserInput, PurchaseDetailUncheckedCreateWithoutUserInput> | PurchaseDetailCreateWithoutUserInput[] | PurchaseDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutUserInput | PurchaseDetailCreateOrConnectWithoutUserInput[]
    createMany?: PurchaseDetailCreateManyUserInputEnvelope
    connect?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
  }

  export type SellDetailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SellDetailCreateWithoutUserInput, SellDetailUncheckedCreateWithoutUserInput> | SellDetailCreateWithoutUserInput[] | SellDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellDetailCreateOrConnectWithoutUserInput | SellDetailCreateOrConnectWithoutUserInput[]
    createMany?: SellDetailCreateManyUserInputEnvelope
    connect?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RentDetailUpdateManyWithoutUserNestedInput = {
    create?: XOR<RentDetailCreateWithoutUserInput, RentDetailUncheckedCreateWithoutUserInput> | RentDetailCreateWithoutUserInput[] | RentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutUserInput | RentDetailCreateOrConnectWithoutUserInput[]
    upsert?: RentDetailUpsertWithWhereUniqueWithoutUserInput | RentDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RentDetailCreateManyUserInputEnvelope
    set?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    disconnect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    delete?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    update?: RentDetailUpdateWithWhereUniqueWithoutUserInput | RentDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RentDetailUpdateManyWithWhereWithoutUserInput | RentDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RentDetailScalarWhereInput | RentDetailScalarWhereInput[]
  }

  export type LentDetailUpdateManyWithoutUserNestedInput = {
    create?: XOR<LentDetailCreateWithoutUserInput, LentDetailUncheckedCreateWithoutUserInput> | LentDetailCreateWithoutUserInput[] | LentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutUserInput | LentDetailCreateOrConnectWithoutUserInput[]
    upsert?: LentDetailUpsertWithWhereUniqueWithoutUserInput | LentDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LentDetailCreateManyUserInputEnvelope
    set?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    disconnect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    delete?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    update?: LentDetailUpdateWithWhereUniqueWithoutUserInput | LentDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LentDetailUpdateManyWithWhereWithoutUserInput | LentDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LentDetailScalarWhereInput | LentDetailScalarWhereInput[]
  }

  export type PurchaseDetailUpdateManyWithoutUserNestedInput = {
    create?: XOR<PurchaseDetailCreateWithoutUserInput, PurchaseDetailUncheckedCreateWithoutUserInput> | PurchaseDetailCreateWithoutUserInput[] | PurchaseDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutUserInput | PurchaseDetailCreateOrConnectWithoutUserInput[]
    upsert?: PurchaseDetailUpsertWithWhereUniqueWithoutUserInput | PurchaseDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PurchaseDetailCreateManyUserInputEnvelope
    set?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    disconnect?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    delete?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    connect?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    update?: PurchaseDetailUpdateWithWhereUniqueWithoutUserInput | PurchaseDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PurchaseDetailUpdateManyWithWhereWithoutUserInput | PurchaseDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PurchaseDetailScalarWhereInput | PurchaseDetailScalarWhereInput[]
  }

  export type SellDetailUpdateManyWithoutUserNestedInput = {
    create?: XOR<SellDetailCreateWithoutUserInput, SellDetailUncheckedCreateWithoutUserInput> | SellDetailCreateWithoutUserInput[] | SellDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellDetailCreateOrConnectWithoutUserInput | SellDetailCreateOrConnectWithoutUserInput[]
    upsert?: SellDetailUpsertWithWhereUniqueWithoutUserInput | SellDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SellDetailCreateManyUserInputEnvelope
    set?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    disconnect?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    delete?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    connect?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    update?: SellDetailUpdateWithWhereUniqueWithoutUserInput | SellDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SellDetailUpdateManyWithWhereWithoutUserInput | SellDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SellDetailScalarWhereInput | SellDetailScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RentDetailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RentDetailCreateWithoutUserInput, RentDetailUncheckedCreateWithoutUserInput> | RentDetailCreateWithoutUserInput[] | RentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutUserInput | RentDetailCreateOrConnectWithoutUserInput[]
    upsert?: RentDetailUpsertWithWhereUniqueWithoutUserInput | RentDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RentDetailCreateManyUserInputEnvelope
    set?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    disconnect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    delete?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    update?: RentDetailUpdateWithWhereUniqueWithoutUserInput | RentDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RentDetailUpdateManyWithWhereWithoutUserInput | RentDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RentDetailScalarWhereInput | RentDetailScalarWhereInput[]
  }

  export type LentDetailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LentDetailCreateWithoutUserInput, LentDetailUncheckedCreateWithoutUserInput> | LentDetailCreateWithoutUserInput[] | LentDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutUserInput | LentDetailCreateOrConnectWithoutUserInput[]
    upsert?: LentDetailUpsertWithWhereUniqueWithoutUserInput | LentDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LentDetailCreateManyUserInputEnvelope
    set?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    disconnect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    delete?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    update?: LentDetailUpdateWithWhereUniqueWithoutUserInput | LentDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LentDetailUpdateManyWithWhereWithoutUserInput | LentDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LentDetailScalarWhereInput | LentDetailScalarWhereInput[]
  }

  export type PurchaseDetailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PurchaseDetailCreateWithoutUserInput, PurchaseDetailUncheckedCreateWithoutUserInput> | PurchaseDetailCreateWithoutUserInput[] | PurchaseDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutUserInput | PurchaseDetailCreateOrConnectWithoutUserInput[]
    upsert?: PurchaseDetailUpsertWithWhereUniqueWithoutUserInput | PurchaseDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PurchaseDetailCreateManyUserInputEnvelope
    set?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    disconnect?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    delete?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    connect?: PurchaseDetailWhereUniqueInput | PurchaseDetailWhereUniqueInput[]
    update?: PurchaseDetailUpdateWithWhereUniqueWithoutUserInput | PurchaseDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PurchaseDetailUpdateManyWithWhereWithoutUserInput | PurchaseDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PurchaseDetailScalarWhereInput | PurchaseDetailScalarWhereInput[]
  }

  export type SellDetailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SellDetailCreateWithoutUserInput, SellDetailUncheckedCreateWithoutUserInput> | SellDetailCreateWithoutUserInput[] | SellDetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellDetailCreateOrConnectWithoutUserInput | SellDetailCreateOrConnectWithoutUserInput[]
    upsert?: SellDetailUpsertWithWhereUniqueWithoutUserInput | SellDetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SellDetailCreateManyUserInputEnvelope
    set?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    disconnect?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    delete?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    connect?: SellDetailWhereUniqueInput | SellDetailWhereUniqueInput[]
    update?: SellDetailUpdateWithWhereUniqueWithoutUserInput | SellDetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SellDetailUpdateManyWithWhereWithoutUserInput | SellDetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SellDetailScalarWhereInput | SellDetailScalarWhereInput[]
  }

  export type CategoryCreateNestedManyWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput> | CategoryCreateWithoutProductsInput[] | CategoryUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput | CategoryCreateOrConnectWithoutProductsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type RentDetailCreateNestedManyWithoutProductInput = {
    create?: XOR<RentDetailCreateWithoutProductInput, RentDetailUncheckedCreateWithoutProductInput> | RentDetailCreateWithoutProductInput[] | RentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutProductInput | RentDetailCreateOrConnectWithoutProductInput[]
    createMany?: RentDetailCreateManyProductInputEnvelope
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
  }

  export type LentDetailCreateNestedManyWithoutProductInput = {
    create?: XOR<LentDetailCreateWithoutProductInput, LentDetailUncheckedCreateWithoutProductInput> | LentDetailCreateWithoutProductInput[] | LentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutProductInput | LentDetailCreateOrConnectWithoutProductInput[]
    createMany?: LentDetailCreateManyProductInputEnvelope
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
  }

  export type PurchaseDetailCreateNestedOneWithoutProductInput = {
    create?: XOR<PurchaseDetailCreateWithoutProductInput, PurchaseDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutProductInput
    connect?: PurchaseDetailWhereUniqueInput
  }

  export type SellDetailCreateNestedOneWithoutProductInput = {
    create?: XOR<SellDetailCreateWithoutProductInput, SellDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: SellDetailCreateOrConnectWithoutProductInput
    connect?: SellDetailWhereUniqueInput
  }

  export type CategoryUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput> | CategoryCreateWithoutProductsInput[] | CategoryUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput | CategoryCreateOrConnectWithoutProductsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type RentDetailUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<RentDetailCreateWithoutProductInput, RentDetailUncheckedCreateWithoutProductInput> | RentDetailCreateWithoutProductInput[] | RentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutProductInput | RentDetailCreateOrConnectWithoutProductInput[]
    createMany?: RentDetailCreateManyProductInputEnvelope
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
  }

  export type LentDetailUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<LentDetailCreateWithoutProductInput, LentDetailUncheckedCreateWithoutProductInput> | LentDetailCreateWithoutProductInput[] | LentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutProductInput | LentDetailCreateOrConnectWithoutProductInput[]
    createMany?: LentDetailCreateManyProductInputEnvelope
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
  }

  export type PurchaseDetailUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<PurchaseDetailCreateWithoutProductInput, PurchaseDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutProductInput
    connect?: PurchaseDetailWhereUniqueInput
  }

  export type SellDetailUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<SellDetailCreateWithoutProductInput, SellDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: SellDetailCreateOrConnectWithoutProductInput
    connect?: SellDetailWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CategoryUpdateManyWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput> | CategoryCreateWithoutProductsInput[] | CategoryUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput | CategoryCreateOrConnectWithoutProductsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutProductsInput | CategoryUpsertWithWhereUniqueWithoutProductsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutProductsInput | CategoryUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutProductsInput | CategoryUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type RentDetailUpdateManyWithoutProductNestedInput = {
    create?: XOR<RentDetailCreateWithoutProductInput, RentDetailUncheckedCreateWithoutProductInput> | RentDetailCreateWithoutProductInput[] | RentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutProductInput | RentDetailCreateOrConnectWithoutProductInput[]
    upsert?: RentDetailUpsertWithWhereUniqueWithoutProductInput | RentDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: RentDetailCreateManyProductInputEnvelope
    set?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    disconnect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    delete?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    update?: RentDetailUpdateWithWhereUniqueWithoutProductInput | RentDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: RentDetailUpdateManyWithWhereWithoutProductInput | RentDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: RentDetailScalarWhereInput | RentDetailScalarWhereInput[]
  }

  export type LentDetailUpdateManyWithoutProductNestedInput = {
    create?: XOR<LentDetailCreateWithoutProductInput, LentDetailUncheckedCreateWithoutProductInput> | LentDetailCreateWithoutProductInput[] | LentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutProductInput | LentDetailCreateOrConnectWithoutProductInput[]
    upsert?: LentDetailUpsertWithWhereUniqueWithoutProductInput | LentDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: LentDetailCreateManyProductInputEnvelope
    set?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    disconnect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    delete?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    update?: LentDetailUpdateWithWhereUniqueWithoutProductInput | LentDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: LentDetailUpdateManyWithWhereWithoutProductInput | LentDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: LentDetailScalarWhereInput | LentDetailScalarWhereInput[]
  }

  export type PurchaseDetailUpdateOneWithoutProductNestedInput = {
    create?: XOR<PurchaseDetailCreateWithoutProductInput, PurchaseDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutProductInput
    upsert?: PurchaseDetailUpsertWithoutProductInput
    disconnect?: PurchaseDetailWhereInput | boolean
    delete?: PurchaseDetailWhereInput | boolean
    connect?: PurchaseDetailWhereUniqueInput
    update?: XOR<XOR<PurchaseDetailUpdateToOneWithWhereWithoutProductInput, PurchaseDetailUpdateWithoutProductInput>, PurchaseDetailUncheckedUpdateWithoutProductInput>
  }

  export type SellDetailUpdateOneWithoutProductNestedInput = {
    create?: XOR<SellDetailCreateWithoutProductInput, SellDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: SellDetailCreateOrConnectWithoutProductInput
    upsert?: SellDetailUpsertWithoutProductInput
    disconnect?: SellDetailWhereInput | boolean
    delete?: SellDetailWhereInput | boolean
    connect?: SellDetailWhereUniqueInput
    update?: XOR<XOR<SellDetailUpdateToOneWithWhereWithoutProductInput, SellDetailUpdateWithoutProductInput>, SellDetailUncheckedUpdateWithoutProductInput>
  }

  export type CategoryUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput> | CategoryCreateWithoutProductsInput[] | CategoryUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput | CategoryCreateOrConnectWithoutProductsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutProductsInput | CategoryUpsertWithWhereUniqueWithoutProductsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutProductsInput | CategoryUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutProductsInput | CategoryUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type RentDetailUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<RentDetailCreateWithoutProductInput, RentDetailUncheckedCreateWithoutProductInput> | RentDetailCreateWithoutProductInput[] | RentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RentDetailCreateOrConnectWithoutProductInput | RentDetailCreateOrConnectWithoutProductInput[]
    upsert?: RentDetailUpsertWithWhereUniqueWithoutProductInput | RentDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: RentDetailCreateManyProductInputEnvelope
    set?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    disconnect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    delete?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    connect?: RentDetailWhereUniqueInput | RentDetailWhereUniqueInput[]
    update?: RentDetailUpdateWithWhereUniqueWithoutProductInput | RentDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: RentDetailUpdateManyWithWhereWithoutProductInput | RentDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: RentDetailScalarWhereInput | RentDetailScalarWhereInput[]
  }

  export type LentDetailUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<LentDetailCreateWithoutProductInput, LentDetailUncheckedCreateWithoutProductInput> | LentDetailCreateWithoutProductInput[] | LentDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LentDetailCreateOrConnectWithoutProductInput | LentDetailCreateOrConnectWithoutProductInput[]
    upsert?: LentDetailUpsertWithWhereUniqueWithoutProductInput | LentDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: LentDetailCreateManyProductInputEnvelope
    set?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    disconnect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    delete?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    connect?: LentDetailWhereUniqueInput | LentDetailWhereUniqueInput[]
    update?: LentDetailUpdateWithWhereUniqueWithoutProductInput | LentDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: LentDetailUpdateManyWithWhereWithoutProductInput | LentDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: LentDetailScalarWhereInput | LentDetailScalarWhereInput[]
  }

  export type PurchaseDetailUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<PurchaseDetailCreateWithoutProductInput, PurchaseDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: PurchaseDetailCreateOrConnectWithoutProductInput
    upsert?: PurchaseDetailUpsertWithoutProductInput
    disconnect?: PurchaseDetailWhereInput | boolean
    delete?: PurchaseDetailWhereInput | boolean
    connect?: PurchaseDetailWhereUniqueInput
    update?: XOR<XOR<PurchaseDetailUpdateToOneWithWhereWithoutProductInput, PurchaseDetailUpdateWithoutProductInput>, PurchaseDetailUncheckedUpdateWithoutProductInput>
  }

  export type SellDetailUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<SellDetailCreateWithoutProductInput, SellDetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: SellDetailCreateOrConnectWithoutProductInput
    upsert?: SellDetailUpsertWithoutProductInput
    disconnect?: SellDetailWhereInput | boolean
    delete?: SellDetailWhereInput | boolean
    connect?: SellDetailWhereUniqueInput
    update?: XOR<XOR<SellDetailUpdateToOneWithWhereWithoutProductInput, SellDetailUpdateWithoutProductInput>, SellDetailUncheckedUpdateWithoutProductInput>
  }

  export type ProductCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoriesInput | ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoriesInput | ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoriesInput | ProductUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoriesInput | ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoriesInput | ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoriesInput | ProductUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutRentDetailInput = {
    create?: XOR<ProductCreateWithoutRentDetailInput, ProductUncheckedCreateWithoutRentDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRentDetailInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRentListInput = {
    create?: XOR<UserCreateWithoutRentListInput, UserUncheckedCreateWithoutRentListInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentListInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductUpdateOneWithoutRentDetailNestedInput = {
    create?: XOR<ProductCreateWithoutRentDetailInput, ProductUncheckedCreateWithoutRentDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRentDetailInput
    upsert?: ProductUpsertWithoutRentDetailInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutRentDetailInput, ProductUpdateWithoutRentDetailInput>, ProductUncheckedUpdateWithoutRentDetailInput>
  }

  export type UserUpdateOneWithoutRentListNestedInput = {
    create?: XOR<UserCreateWithoutRentListInput, UserUncheckedCreateWithoutRentListInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentListInput
    upsert?: UserUpsertWithoutRentListInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRentListInput, UserUpdateWithoutRentListInput>, UserUncheckedUpdateWithoutRentListInput>
  }

  export type ProductCreateNestedOneWithoutLentDetailInput = {
    create?: XOR<ProductCreateWithoutLentDetailInput, ProductUncheckedCreateWithoutLentDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutLentDetailInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLentDetailInput = {
    create?: XOR<UserCreateWithoutLentDetailInput, UserUncheckedCreateWithoutLentDetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutLentDetailInput
    connect?: UserWhereUniqueInput
  }

  export type ProductUpdateOneWithoutLentDetailNestedInput = {
    create?: XOR<ProductCreateWithoutLentDetailInput, ProductUncheckedCreateWithoutLentDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutLentDetailInput
    upsert?: ProductUpsertWithoutLentDetailInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutLentDetailInput, ProductUpdateWithoutLentDetailInput>, ProductUncheckedUpdateWithoutLentDetailInput>
  }

  export type UserUpdateOneWithoutLentDetailNestedInput = {
    create?: XOR<UserCreateWithoutLentDetailInput, UserUncheckedCreateWithoutLentDetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutLentDetailInput
    upsert?: UserUpsertWithoutLentDetailInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLentDetailInput, UserUpdateWithoutLentDetailInput>, UserUncheckedUpdateWithoutLentDetailInput>
  }

  export type ProductCreateNestedOneWithoutPurchaseDetailInput = {
    create?: XOR<ProductCreateWithoutPurchaseDetailInput, ProductUncheckedCreateWithoutPurchaseDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPurchaseDetailInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPurchaseDetailInput = {
    create?: XOR<UserCreateWithoutPurchaseDetailInput, UserUncheckedCreateWithoutPurchaseDetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchaseDetailInput
    connect?: UserWhereUniqueInput
  }

  export type ProductUpdateOneWithoutPurchaseDetailNestedInput = {
    create?: XOR<ProductCreateWithoutPurchaseDetailInput, ProductUncheckedCreateWithoutPurchaseDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPurchaseDetailInput
    upsert?: ProductUpsertWithoutPurchaseDetailInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutPurchaseDetailInput, ProductUpdateWithoutPurchaseDetailInput>, ProductUncheckedUpdateWithoutPurchaseDetailInput>
  }

  export type UserUpdateOneWithoutPurchaseDetailNestedInput = {
    create?: XOR<UserCreateWithoutPurchaseDetailInput, UserUncheckedCreateWithoutPurchaseDetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchaseDetailInput
    upsert?: UserUpsertWithoutPurchaseDetailInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPurchaseDetailInput, UserUpdateWithoutPurchaseDetailInput>, UserUncheckedUpdateWithoutPurchaseDetailInput>
  }

  export type ProductCreateNestedOneWithoutSellDetailInput = {
    create?: XOR<ProductCreateWithoutSellDetailInput, ProductUncheckedCreateWithoutSellDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSellDetailInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSellDetailInput = {
    create?: XOR<UserCreateWithoutSellDetailInput, UserUncheckedCreateWithoutSellDetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellDetailInput
    connect?: UserWhereUniqueInput
  }

  export type ProductUpdateOneWithoutSellDetailNestedInput = {
    create?: XOR<ProductCreateWithoutSellDetailInput, ProductUncheckedCreateWithoutSellDetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSellDetailInput
    upsert?: ProductUpsertWithoutSellDetailInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSellDetailInput, ProductUpdateWithoutSellDetailInput>, ProductUncheckedUpdateWithoutSellDetailInput>
  }

  export type UserUpdateOneWithoutSellDetailNestedInput = {
    create?: XOR<UserCreateWithoutSellDetailInput, UserUncheckedCreateWithoutSellDetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellDetailInput
    upsert?: UserUpsertWithoutSellDetailInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSellDetailInput, UserUpdateWithoutSellDetailInput>, UserUncheckedUpdateWithoutSellDetailInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RentDetailCreateWithoutUserInput = {
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    product?: ProductCreateNestedOneWithoutRentDetailInput
  }

  export type RentDetailUncheckedCreateWithoutUserInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
  }

  export type RentDetailCreateOrConnectWithoutUserInput = {
    where: RentDetailWhereUniqueInput
    create: XOR<RentDetailCreateWithoutUserInput, RentDetailUncheckedCreateWithoutUserInput>
  }

  export type RentDetailCreateManyUserInputEnvelope = {
    data: RentDetailCreateManyUserInput | RentDetailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LentDetailCreateWithoutUserInput = {
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    product?: ProductCreateNestedOneWithoutLentDetailInput
  }

  export type LentDetailUncheckedCreateWithoutUserInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
  }

  export type LentDetailCreateOrConnectWithoutUserInput = {
    where: LentDetailWhereUniqueInput
    create: XOR<LentDetailCreateWithoutUserInput, LentDetailUncheckedCreateWithoutUserInput>
  }

  export type LentDetailCreateManyUserInputEnvelope = {
    data: LentDetailCreateManyUserInput | LentDetailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseDetailCreateWithoutUserInput = {
    product?: ProductCreateNestedOneWithoutPurchaseDetailInput
  }

  export type PurchaseDetailUncheckedCreateWithoutUserInput = {
    id?: number
    productId?: number | null
  }

  export type PurchaseDetailCreateOrConnectWithoutUserInput = {
    where: PurchaseDetailWhereUniqueInput
    create: XOR<PurchaseDetailCreateWithoutUserInput, PurchaseDetailUncheckedCreateWithoutUserInput>
  }

  export type PurchaseDetailCreateManyUserInputEnvelope = {
    data: PurchaseDetailCreateManyUserInput | PurchaseDetailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SellDetailCreateWithoutUserInput = {
    product?: ProductCreateNestedOneWithoutSellDetailInput
  }

  export type SellDetailUncheckedCreateWithoutUserInput = {
    id?: number
    productId?: number | null
  }

  export type SellDetailCreateOrConnectWithoutUserInput = {
    where: SellDetailWhereUniqueInput
    create: XOR<SellDetailCreateWithoutUserInput, SellDetailUncheckedCreateWithoutUserInput>
  }

  export type SellDetailCreateManyUserInputEnvelope = {
    data: SellDetailCreateManyUserInput | SellDetailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RentDetailUpsertWithWhereUniqueWithoutUserInput = {
    where: RentDetailWhereUniqueInput
    update: XOR<RentDetailUpdateWithoutUserInput, RentDetailUncheckedUpdateWithoutUserInput>
    create: XOR<RentDetailCreateWithoutUserInput, RentDetailUncheckedCreateWithoutUserInput>
  }

  export type RentDetailUpdateWithWhereUniqueWithoutUserInput = {
    where: RentDetailWhereUniqueInput
    data: XOR<RentDetailUpdateWithoutUserInput, RentDetailUncheckedUpdateWithoutUserInput>
  }

  export type RentDetailUpdateManyWithWhereWithoutUserInput = {
    where: RentDetailScalarWhereInput
    data: XOR<RentDetailUpdateManyMutationInput, RentDetailUncheckedUpdateManyWithoutUserInput>
  }

  export type RentDetailScalarWhereInput = {
    AND?: RentDetailScalarWhereInput | RentDetailScalarWhereInput[]
    OR?: RentDetailScalarWhereInput[]
    NOT?: RentDetailScalarWhereInput | RentDetailScalarWhereInput[]
    id?: IntFilter<"RentDetail"> | number
    startDate?: DateTimeFilter<"RentDetail"> | Date | string
    endDate?: DateTimeFilter<"RentDetail"> | Date | string
    totalPrice?: FloatNullableFilter<"RentDetail"> | number | null
    productId?: IntNullableFilter<"RentDetail"> | number | null
    userId?: IntNullableFilter<"RentDetail"> | number | null
  }

  export type LentDetailUpsertWithWhereUniqueWithoutUserInput = {
    where: LentDetailWhereUniqueInput
    update: XOR<LentDetailUpdateWithoutUserInput, LentDetailUncheckedUpdateWithoutUserInput>
    create: XOR<LentDetailCreateWithoutUserInput, LentDetailUncheckedCreateWithoutUserInput>
  }

  export type LentDetailUpdateWithWhereUniqueWithoutUserInput = {
    where: LentDetailWhereUniqueInput
    data: XOR<LentDetailUpdateWithoutUserInput, LentDetailUncheckedUpdateWithoutUserInput>
  }

  export type LentDetailUpdateManyWithWhereWithoutUserInput = {
    where: LentDetailScalarWhereInput
    data: XOR<LentDetailUpdateManyMutationInput, LentDetailUncheckedUpdateManyWithoutUserInput>
  }

  export type LentDetailScalarWhereInput = {
    AND?: LentDetailScalarWhereInput | LentDetailScalarWhereInput[]
    OR?: LentDetailScalarWhereInput[]
    NOT?: LentDetailScalarWhereInput | LentDetailScalarWhereInput[]
    id?: IntFilter<"LentDetail"> | number
    startDate?: DateTimeFilter<"LentDetail"> | Date | string
    endDate?: DateTimeFilter<"LentDetail"> | Date | string
    totalPrice?: FloatNullableFilter<"LentDetail"> | number | null
    productId?: IntNullableFilter<"LentDetail"> | number | null
    userId?: IntNullableFilter<"LentDetail"> | number | null
  }

  export type PurchaseDetailUpsertWithWhereUniqueWithoutUserInput = {
    where: PurchaseDetailWhereUniqueInput
    update: XOR<PurchaseDetailUpdateWithoutUserInput, PurchaseDetailUncheckedUpdateWithoutUserInput>
    create: XOR<PurchaseDetailCreateWithoutUserInput, PurchaseDetailUncheckedCreateWithoutUserInput>
  }

  export type PurchaseDetailUpdateWithWhereUniqueWithoutUserInput = {
    where: PurchaseDetailWhereUniqueInput
    data: XOR<PurchaseDetailUpdateWithoutUserInput, PurchaseDetailUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseDetailUpdateManyWithWhereWithoutUserInput = {
    where: PurchaseDetailScalarWhereInput
    data: XOR<PurchaseDetailUpdateManyMutationInput, PurchaseDetailUncheckedUpdateManyWithoutUserInput>
  }

  export type PurchaseDetailScalarWhereInput = {
    AND?: PurchaseDetailScalarWhereInput | PurchaseDetailScalarWhereInput[]
    OR?: PurchaseDetailScalarWhereInput[]
    NOT?: PurchaseDetailScalarWhereInput | PurchaseDetailScalarWhereInput[]
    id?: IntFilter<"PurchaseDetail"> | number
    productId?: IntNullableFilter<"PurchaseDetail"> | number | null
    userId?: IntNullableFilter<"PurchaseDetail"> | number | null
  }

  export type SellDetailUpsertWithWhereUniqueWithoutUserInput = {
    where: SellDetailWhereUniqueInput
    update: XOR<SellDetailUpdateWithoutUserInput, SellDetailUncheckedUpdateWithoutUserInput>
    create: XOR<SellDetailCreateWithoutUserInput, SellDetailUncheckedCreateWithoutUserInput>
  }

  export type SellDetailUpdateWithWhereUniqueWithoutUserInput = {
    where: SellDetailWhereUniqueInput
    data: XOR<SellDetailUpdateWithoutUserInput, SellDetailUncheckedUpdateWithoutUserInput>
  }

  export type SellDetailUpdateManyWithWhereWithoutUserInput = {
    where: SellDetailScalarWhereInput
    data: XOR<SellDetailUpdateManyMutationInput, SellDetailUncheckedUpdateManyWithoutUserInput>
  }

  export type SellDetailScalarWhereInput = {
    AND?: SellDetailScalarWhereInput | SellDetailScalarWhereInput[]
    OR?: SellDetailScalarWhereInput[]
    NOT?: SellDetailScalarWhereInput | SellDetailScalarWhereInput[]
    id?: IntFilter<"SellDetail"> | number
    productId?: IntNullableFilter<"SellDetail"> | number | null
    userId?: IntNullableFilter<"SellDetail"> | number | null
  }

  export type CategoryCreateWithoutProductsInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type RentDetailCreateWithoutProductInput = {
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    User?: UserCreateNestedOneWithoutRentListInput
  }

  export type RentDetailUncheckedCreateWithoutProductInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    userId?: number | null
  }

  export type RentDetailCreateOrConnectWithoutProductInput = {
    where: RentDetailWhereUniqueInput
    create: XOR<RentDetailCreateWithoutProductInput, RentDetailUncheckedCreateWithoutProductInput>
  }

  export type RentDetailCreateManyProductInputEnvelope = {
    data: RentDetailCreateManyProductInput | RentDetailCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type LentDetailCreateWithoutProductInput = {
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    User?: UserCreateNestedOneWithoutLentDetailInput
  }

  export type LentDetailUncheckedCreateWithoutProductInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    userId?: number | null
  }

  export type LentDetailCreateOrConnectWithoutProductInput = {
    where: LentDetailWhereUniqueInput
    create: XOR<LentDetailCreateWithoutProductInput, LentDetailUncheckedCreateWithoutProductInput>
  }

  export type LentDetailCreateManyProductInputEnvelope = {
    data: LentDetailCreateManyProductInput | LentDetailCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseDetailCreateWithoutProductInput = {
    User?: UserCreateNestedOneWithoutPurchaseDetailInput
  }

  export type PurchaseDetailUncheckedCreateWithoutProductInput = {
    id?: number
    userId?: number | null
  }

  export type PurchaseDetailCreateOrConnectWithoutProductInput = {
    where: PurchaseDetailWhereUniqueInput
    create: XOR<PurchaseDetailCreateWithoutProductInput, PurchaseDetailUncheckedCreateWithoutProductInput>
  }

  export type SellDetailCreateWithoutProductInput = {
    User?: UserCreateNestedOneWithoutSellDetailInput
  }

  export type SellDetailUncheckedCreateWithoutProductInput = {
    id?: number
    userId?: number | null
  }

  export type SellDetailCreateOrConnectWithoutProductInput = {
    where: SellDetailWhereUniqueInput
    create: XOR<SellDetailCreateWithoutProductInput, SellDetailUncheckedCreateWithoutProductInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateManyWithWhereWithoutProductsInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutProductsInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
  }

  export type RentDetailUpsertWithWhereUniqueWithoutProductInput = {
    where: RentDetailWhereUniqueInput
    update: XOR<RentDetailUpdateWithoutProductInput, RentDetailUncheckedUpdateWithoutProductInput>
    create: XOR<RentDetailCreateWithoutProductInput, RentDetailUncheckedCreateWithoutProductInput>
  }

  export type RentDetailUpdateWithWhereUniqueWithoutProductInput = {
    where: RentDetailWhereUniqueInput
    data: XOR<RentDetailUpdateWithoutProductInput, RentDetailUncheckedUpdateWithoutProductInput>
  }

  export type RentDetailUpdateManyWithWhereWithoutProductInput = {
    where: RentDetailScalarWhereInput
    data: XOR<RentDetailUpdateManyMutationInput, RentDetailUncheckedUpdateManyWithoutProductInput>
  }

  export type LentDetailUpsertWithWhereUniqueWithoutProductInput = {
    where: LentDetailWhereUniqueInput
    update: XOR<LentDetailUpdateWithoutProductInput, LentDetailUncheckedUpdateWithoutProductInput>
    create: XOR<LentDetailCreateWithoutProductInput, LentDetailUncheckedCreateWithoutProductInput>
  }

  export type LentDetailUpdateWithWhereUniqueWithoutProductInput = {
    where: LentDetailWhereUniqueInput
    data: XOR<LentDetailUpdateWithoutProductInput, LentDetailUncheckedUpdateWithoutProductInput>
  }

  export type LentDetailUpdateManyWithWhereWithoutProductInput = {
    where: LentDetailScalarWhereInput
    data: XOR<LentDetailUpdateManyMutationInput, LentDetailUncheckedUpdateManyWithoutProductInput>
  }

  export type PurchaseDetailUpsertWithoutProductInput = {
    update: XOR<PurchaseDetailUpdateWithoutProductInput, PurchaseDetailUncheckedUpdateWithoutProductInput>
    create: XOR<PurchaseDetailCreateWithoutProductInput, PurchaseDetailUncheckedCreateWithoutProductInput>
    where?: PurchaseDetailWhereInput
  }

  export type PurchaseDetailUpdateToOneWithWhereWithoutProductInput = {
    where?: PurchaseDetailWhereInput
    data: XOR<PurchaseDetailUpdateWithoutProductInput, PurchaseDetailUncheckedUpdateWithoutProductInput>
  }

  export type PurchaseDetailUpdateWithoutProductInput = {
    User?: UserUpdateOneWithoutPurchaseDetailNestedInput
  }

  export type PurchaseDetailUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SellDetailUpsertWithoutProductInput = {
    update: XOR<SellDetailUpdateWithoutProductInput, SellDetailUncheckedUpdateWithoutProductInput>
    create: XOR<SellDetailCreateWithoutProductInput, SellDetailUncheckedCreateWithoutProductInput>
    where?: SellDetailWhereInput
  }

  export type SellDetailUpdateToOneWithWhereWithoutProductInput = {
    where?: SellDetailWhereInput
    data: XOR<SellDetailUpdateWithoutProductInput, SellDetailUncheckedUpdateWithoutProductInput>
  }

  export type SellDetailUpdateWithoutProductInput = {
    User?: UserUpdateOneWithoutSellDetailNestedInput
  }

  export type SellDetailUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductCreateWithoutCategoriesInput = {
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    RentDetail?: RentDetailCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    RentDetail?: RentDetailUncheckedCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoriesInput, ProductUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoriesInput, ProductUncheckedUpdateWithoutCategoriesInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoriesInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: FloatNullableFilter<"Product"> | number | null
    createdBy?: IntNullableFilter<"Product"> | number | null
    rentPrice?: FloatNullableFilter<"Product"> | number | null
    rentType?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    views?: IntNullableFilter<"Product"> | number | null
  }

  export type ProductCreateWithoutRentDetailInput = {
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryCreateNestedManyWithoutProductsInput
    LentDetail?: LentDetailCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutRentDetailInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryUncheckedCreateNestedManyWithoutProductsInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutRentDetailInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutRentDetailInput, ProductUncheckedCreateWithoutRentDetailInput>
  }

  export type UserCreateWithoutRentListInput = {
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    LentDetail?: LentDetailCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRentListInput = {
    id?: number
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRentListInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRentListInput, UserUncheckedCreateWithoutRentListInput>
  }

  export type ProductUpsertWithoutRentDetailInput = {
    update: XOR<ProductUpdateWithoutRentDetailInput, ProductUncheckedUpdateWithoutRentDetailInput>
    create: XOR<ProductCreateWithoutRentDetailInput, ProductUncheckedCreateWithoutRentDetailInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutRentDetailInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutRentDetailInput, ProductUncheckedUpdateWithoutRentDetailInput>
  }

  export type ProductUpdateWithoutRentDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUpdateManyWithoutProductsNestedInput
    LentDetail?: LentDetailUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutRentDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUncheckedUpdateManyWithoutProductsNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type UserUpsertWithoutRentListInput = {
    update: XOR<UserUpdateWithoutRentListInput, UserUncheckedUpdateWithoutRentListInput>
    create: XOR<UserCreateWithoutRentListInput, UserUncheckedCreateWithoutRentListInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRentListInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRentListInput, UserUncheckedUpdateWithoutRentListInput>
  }

  export type UserUpdateWithoutRentListInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    LentDetail?: LentDetailUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRentListInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    LentDetail?: LentDetailUncheckedUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutLentDetailInput = {
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutLentDetailInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryUncheckedCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailUncheckedCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedOneWithoutProductInput
    SellDetail?: SellDetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutLentDetailInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutLentDetailInput, ProductUncheckedCreateWithoutLentDetailInput>
  }

  export type UserCreateWithoutLentDetailInput = {
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLentDetailInput = {
    id?: number
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailUncheckedCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLentDetailInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLentDetailInput, UserUncheckedCreateWithoutLentDetailInput>
  }

  export type ProductUpsertWithoutLentDetailInput = {
    update: XOR<ProductUpdateWithoutLentDetailInput, ProductUncheckedUpdateWithoutLentDetailInput>
    create: XOR<ProductCreateWithoutLentDetailInput, ProductUncheckedCreateWithoutLentDetailInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutLentDetailInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutLentDetailInput, ProductUncheckedUpdateWithoutLentDetailInput>
  }

  export type ProductUpdateWithoutLentDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutLentDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUncheckedUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUncheckedUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type UserUpsertWithoutLentDetailInput = {
    update: XOR<UserUpdateWithoutLentDetailInput, UserUncheckedUpdateWithoutLentDetailInput>
    create: XOR<UserCreateWithoutLentDetailInput, UserUncheckedCreateWithoutLentDetailInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLentDetailInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLentDetailInput, UserUncheckedUpdateWithoutLentDetailInput>
  }

  export type UserUpdateWithoutLentDetailInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLentDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUncheckedUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutPurchaseDetailInput = {
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailCreateNestedManyWithoutProductInput
    SellDetail?: SellDetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutPurchaseDetailInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryUncheckedCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailUncheckedCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutProductInput
    SellDetail?: SellDetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPurchaseDetailInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPurchaseDetailInput, ProductUncheckedCreateWithoutPurchaseDetailInput>
  }

  export type UserCreateWithoutPurchaseDetailInput = {
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailCreateNestedManyWithoutUserInput
    LentDetail?: LentDetailCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPurchaseDetailInput = {
    id?: number
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailUncheckedCreateNestedManyWithoutUserInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutUserInput
    SellDetail?: SellDetailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchaseDetailInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchaseDetailInput, UserUncheckedCreateWithoutPurchaseDetailInput>
  }

  export type ProductUpsertWithoutPurchaseDetailInput = {
    update: XOR<ProductUpdateWithoutPurchaseDetailInput, ProductUncheckedUpdateWithoutPurchaseDetailInput>
    create: XOR<ProductCreateWithoutPurchaseDetailInput, ProductUncheckedCreateWithoutPurchaseDetailInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutPurchaseDetailInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutPurchaseDetailInput, ProductUncheckedUpdateWithoutPurchaseDetailInput>
  }

  export type ProductUpdateWithoutPurchaseDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUpdateManyWithoutProductNestedInput
    SellDetail?: SellDetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutPurchaseDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUncheckedUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUncheckedUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutProductNestedInput
    SellDetail?: SellDetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type UserUpsertWithoutPurchaseDetailInput = {
    update: XOR<UserUpdateWithoutPurchaseDetailInput, UserUncheckedUpdateWithoutPurchaseDetailInput>
    create: XOR<UserCreateWithoutPurchaseDetailInput, UserUncheckedCreateWithoutPurchaseDetailInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPurchaseDetailInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPurchaseDetailInput, UserUncheckedUpdateWithoutPurchaseDetailInput>
  }

  export type UserUpdateWithoutPurchaseDetailInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUpdateManyWithoutUserNestedInput
    LentDetail?: LentDetailUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPurchaseDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUncheckedUpdateManyWithoutUserNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutUserNestedInput
    SellDetail?: SellDetailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutSellDetailInput = {
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSellDetailInput = {
    id?: number
    name: string
    description?: string | null
    price?: number | null
    createdBy?: number | null
    rentPrice?: number | null
    rentType?: string | null
    createdAt?: Date | string | null
    views?: number | null
    categories?: CategoryUncheckedCreateNestedManyWithoutProductsInput
    RentDetail?: RentDetailUncheckedCreateNestedManyWithoutProductInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutProductInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSellDetailInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSellDetailInput, ProductUncheckedCreateWithoutSellDetailInput>
  }

  export type UserCreateWithoutSellDetailInput = {
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailCreateNestedManyWithoutUserInput
    LentDetail?: LentDetailCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSellDetailInput = {
    id?: number
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    address?: string | null
    rentList?: RentDetailUncheckedCreateNestedManyWithoutUserInput
    LentDetail?: LentDetailUncheckedCreateNestedManyWithoutUserInput
    PurchaseDetail?: PurchaseDetailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSellDetailInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSellDetailInput, UserUncheckedCreateWithoutSellDetailInput>
  }

  export type ProductUpsertWithoutSellDetailInput = {
    update: XOR<ProductUpdateWithoutSellDetailInput, ProductUncheckedUpdateWithoutSellDetailInput>
    create: XOR<ProductCreateWithoutSellDetailInput, ProductUncheckedCreateWithoutSellDetailInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSellDetailInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSellDetailInput, ProductUncheckedUpdateWithoutSellDetailInput>
  }

  export type ProductUpdateWithoutSellDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSellDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: CategoryUncheckedUpdateManyWithoutProductsNestedInput
    RentDetail?: RentDetailUncheckedUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type UserUpsertWithoutSellDetailInput = {
    update: XOR<UserUpdateWithoutSellDetailInput, UserUncheckedUpdateWithoutSellDetailInput>
    create: XOR<UserCreateWithoutSellDetailInput, UserUncheckedCreateWithoutSellDetailInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSellDetailInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSellDetailInput, UserUncheckedUpdateWithoutSellDetailInput>
  }

  export type UserUpdateWithoutSellDetailInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUpdateManyWithoutUserNestedInput
    LentDetail?: LentDetailUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSellDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    rentList?: RentDetailUncheckedUpdateManyWithoutUserNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutUserNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RentDetailCreateManyUserInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
  }

  export type LentDetailCreateManyUserInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    productId?: number | null
  }

  export type PurchaseDetailCreateManyUserInput = {
    id?: number
    productId?: number | null
  }

  export type SellDetailCreateManyUserInput = {
    id?: number
    productId?: number | null
  }

  export type RentDetailUpdateWithoutUserInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneWithoutRentDetailNestedInput
  }

  export type RentDetailUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentDetailUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LentDetailUpdateWithoutUserInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneWithoutLentDetailNestedInput
  }

  export type LentDetailUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LentDetailUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseDetailUpdateWithoutUserInput = {
    product?: ProductUpdateOneWithoutPurchaseDetailNestedInput
  }

  export type PurchaseDetailUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseDetailUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SellDetailUpdateWithoutUserInput = {
    product?: ProductUpdateOneWithoutSellDetailNestedInput
  }

  export type SellDetailUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SellDetailUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentDetailCreateManyProductInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    userId?: number | null
  }

  export type LentDetailCreateManyProductInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    totalPrice?: number | null
    userId?: number | null
  }

  export type CategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RentDetailUpdateWithoutProductInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    User?: UserUpdateOneWithoutRentListNestedInput
  }

  export type RentDetailUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentDetailUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LentDetailUpdateWithoutProductInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    User?: UserUpdateOneWithoutLentDetailNestedInput
  }

  export type LentDetailUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LentDetailUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    RentDetail?: RentDetailUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
    RentDetail?: RentDetailUncheckedUpdateManyWithoutProductNestedInput
    LentDetail?: LentDetailUncheckedUpdateManyWithoutProductNestedInput
    PurchaseDetail?: PurchaseDetailUncheckedUpdateOneWithoutProductNestedInput
    SellDetail?: SellDetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    rentPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    rentType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    views?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RentDetailDefaultArgs instead
     */
    export type RentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RentDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LentDetailDefaultArgs instead
     */
    export type LentDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LentDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchaseDetailDefaultArgs instead
     */
    export type PurchaseDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PurchaseDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SellDetailDefaultArgs instead
     */
    export type SellDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SellDetailDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}